{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.6/node_modules/@neos-project/neos-ui-extensibility/src/readFromConsumerApi.ts", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.6/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/react/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.6/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-decorators/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.6/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/react-ui-components/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.6/node_modules/@neos-project/neos-ui-extensibility/src/index.ts", "../Private/Editor/ColorPicker/index.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/hooks/useEventCallback.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/utils/clamp.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/common/Interactive.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/utils/format.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/common/Pointer.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/utils/round.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/utils/convert.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/common/Hue.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/common/Saturation.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/utils/compare.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/hooks/useColorManipulation.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/utils/nonce.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/hooks/useIsomorphicLayoutEffect.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/hooks/useStyleSheet.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/common/ColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HexColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/common/Alpha.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/common/AlphaColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HexAlphaColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HslaColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HslaStringColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HslColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HslStringColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HsvaColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HsvaStringColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HsvColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HsvStringColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/RgbaColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/RgbaStringColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/RgbColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/RgbStringColorPicker.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/utils/validate.ts", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/common/ColorInput.tsx", "../../node_modules/.pnpm/react-colorful@5.6.1_react-dom@16.14.0_react@16.14.0/node_modules/react-colorful/src/components/HexColorInput.tsx", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/multiply-matrices.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/util.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/hooks.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/adapt.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/defaults.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/parse.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/getColor.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/space.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/xyz-d65.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/rgbspace.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/getAll.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/get.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/setAll.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/set.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/xyz-d50.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/lab.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/angles.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/lch.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/deltaE/deltaE2000.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/oklab.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/deltaE/deltaEOK.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/inGamut.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/clone.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/distance.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/deltaE/deltaE76.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/deltaE/deltaECMC.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/xyz-abs-d65.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/jzazbz.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/jzczhz.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/deltaE/deltaEJz.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/ictcp.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/deltaE/deltaEITP.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/cam16.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/hct.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/deltaE/deltaEHCT.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/deltaE/index.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/toGamut.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/to.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/serialize.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/srgb-linear.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/keywords.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/srgb.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/hsl.js", "../../node_modules/.pnpm/colorjs.io@0.5.0/node_modules/colorjs.io/src/spaces/oklch.js", "../Private/Editor/ColorPicker/Components/ColorConverter.ts", "../Private/Editor/ColorPicker/Components/OptionPreview.tsx", "../../node_modules/.pnpm/@stylexjs+stylex@0.5.1/node_modules/@stylexjs/stylex/lib/es/stylex.mjs", "../Private/Editor/ColorPicker/Components/RangeSlider.tsx", "../../node_modules/.pnpm/nanoid@5.0.6/node_modules/nanoid/url-alphabet/index.js", "../../node_modules/.pnpm/nanoid@5.0.6/node_modules/nanoid/index.browser.js", "../Private/Editor/manifest.ts"],
  "sourcesContent": [null, null, null, null, null, "// @ts-ignore\nimport React, { useEffect, useState } from \"react\";\nimport { neos } from \"@neos-project/neos-ui-decorators\";\nimport { HexColorPicker, HexColorInput } from \"react-colorful\";\nimport { onHexChange, setLuminance, setLightness, setStateFromValue, OptionPreview, RangeSlider } from \"./Components\";\nimport { IconButton, SelectBox } from \"@neos-project/react-ui-components\";\nimport * as stylex from \"@stylexjs/stylex\";\nimport \"./Tokens.stylex\";\nimport { colors, sizes, fonts, transitions } from \"./Tokens.stylex\";\nconst neosifier = neos(globalRegistry => ({\n  i18nRegistry: globalRegistry.get(\"i18n\"),\n  config: globalRegistry.get(\"frontendConfiguration\").get(\"Carbon.ColorPicker.OKLCH\")\n}));\nconst defaultProps = {\n  options: {\n    mode: \"all\",\n    disabled: false,\n    allowEmpty: true,\n    showPresets: true,\n    showPicker: true,\n    showHexInput: true,\n    showLightness: false,\n    showLuminance: false,\n    precision: 5,\n    presets: {}\n  }\n};\nconst styles = {\n  disabled: {\n    cursor: \"x1h6gzvc\",\n    opacity: \"x190dgpg\",\n    \":where(*) *_pointerEvents\": \"x1g8rrie\",\n    $$css: true\n  },\n  highlight: {\n    borderRadius: \"xjohyra\",\n    borderStartStartRadius: null,\n    borderStartEndRadius: null,\n    borderEndStartRadius: null,\n    borderEndEndRadius: null,\n    borderTopLeftRadius: null,\n    borderTopRightRadius: null,\n    borderBottomLeftRadius: null,\n    borderBottomRightRadius: null,\n    boxShadow: \"x11mstge\",\n    $$css: true\n  },\n  wrapper: {\n    display: \"x78zum5\",\n    flexDirection: \"xdt5ytf\",\n    gap: \"x188dswm\",\n    $$css: true\n  },\n  colorPreview: {\n    borderRadius: \"xjohyra\",\n    height: \"x1hhc0k\",\n    minWidth: \"x15g7okx\",\n    flex: \"x98rzlu\",\n    $$css: true\n  },\n  colorPreviewTransparent: {\n    backgroundSize: \"x1ht9rhz\",\n    backgroundColor: \"x1qjns4s\",\n    backgroundImage: \"x1149thc\",\n    $$css: true\n  }\n};\n\n// @ts-ignore\nfunction Editor(props) {\n  const options = {\n    ...defaultProps.options,\n    ...props.config,\n    ...props.options\n  };\n  const {\n    value,\n    commit,\n    highlight,\n    i18nRegistry\n  } = props;\n  const {\n    allowEmpty,\n    disabled,\n    mode,\n    precision,\n    presets,\n    showHexInput,\n    showLightness,\n    showLuminance,\n    showPicker,\n    showPresets\n  } = options;\n  if (mode !== \"coords\" && mode !== \"hex\" && mode !== \"all\" && mode !== \"oklch\") {\n    return <div {...{\n      className: \"xjohyra x1hgx17m x89w75u\"\n    }}>\n                {i18nRegistry.translate(\"Carbon.ColorPicker.OKLCH:Main:invalidMode\", \"\", [mode])}\n            </div>;\n  }\n  const [state, setState] = useState(setStateFromValue(value, mode, precision));\n  useEffect(() => {\n    if (!state?.hex) {\n      if (mode == \"all\" || mode == \"coords\") {\n        commit({});\n        return;\n      }\n      commit(\"\");\n      return;\n    }\n    if (mode === \"all\") {\n      commit({\n        hex: state.hex,\n        oklch: state.oklch,\n        coords: state.coords\n      });\n      return;\n    }\n    commit(state[mode]);\n  }, [state]);\n  function handleHexChange(hex: string) {\n    setState(onHexChange(hex, precision));\n  }\n  function handleLightnessChange(lightness: number) {\n    handleHexChange(setLightness(state?.hex, lightness));\n  }\n  function handleLuminanceChange(luminance: number) {\n    handleHexChange(setLuminance(state?.oklch, luminance));\n  }\n  const presetOptions = showPresets && presets && Object.entries(presets).map(([key, color]) => ({\n    value: color,\n    label: key\n  })).filter(preset => !!preset.value);\n  const lightness = state?.lightness || 0;\n  const luminance = state?.coords?.l || 0;\n  return <div {...stylex.props(styles.wrapper, disabled && styles.disabled)}>\n            {Boolean(showPicker) && <HexColorPicker {...{\n      className: \"xh8yej3 xt7dq6l x1plog1 xlt0ddm xf5yl2k x9av0op xdosjj7 xkmff00 xbq8i1p x19mnrqj x13bp1ud x1th5coa x1lptuiq x4hip2o xfbmp4j x2lqnu4 xmxw2tw x46gmau\"\n    }} color={state?.hex} onChange={handleHexChange} />}\n\n            {Boolean(showLightness) && <RangeSlider disabled={state?.hex ? false : true} value={lightness} onChange={handleLightnessChange} label={i18nRegistry.translate(\"Carbon.ColorPicker.OKLCH:Main:lightness\")} />}\n            {Boolean(showLuminance) && <RangeSlider disabled={state?.coords?.l ? false : true} value={luminance * 100} onChange={handleLuminanceChange} label={i18nRegistry.translate(\"Carbon.ColorPicker.OKLCH:Main:luminance\")} />}\n\n            <div {...{\n      className: \"x78zum5 x188dswm\"\n    }}>\n                <div {...stylex.props(styles.colorPreview, state?.oklch || styles.colorPreviewTransparent, highlight && styles.highlight)} style={{\n        backgroundColor: state?.oklch\n      }} />\n                {Boolean(showHexInput) && <HexColorInput {...{\n        className: \"x1iyjqo2 x1hhc0k xh8yej3 xjohyra x1wty727 x1qjns4s xtqyqw7 x1awj2ng x1a2a7pz x1agkqgv xtw1abo x1sirlc8\"\n      }} title={i18nRegistry.translate(\"Carbon.ColorPicker.OKLCH:Main:setHexColor\")} color={state?.hex} onChange={handleHexChange} prefixed={false} />}\n                {Boolean(allowEmpty) && <IconButton style=\"lighter\" icon=\"times\" title={i18nRegistry.translate(\"Carbon.ColorPicker.OKLCH:Main:resetColor\")} onClick={() => {\n        setState(null);\n      }} />}\n            </div>\n            {Boolean(!!presetOptions) && <SelectBox options={presetOptions} value={state?.hex} placeholder={i18nRegistry.translate(\"Carbon.ColorPicker.OKLCH:Main:preset\")} allowEmpty={false} onValueChange={handleHexChange} ListPreviewElement={OptionPreview} />}\n        </div>;\n}\nexport default neosifier(Editor);", "import { useRef } from \"react\";\n\n// Saves incoming handler to the ref in order to avoid \"useCallback hell\"\nexport function useEventCallback<T>(handler?: (value: T) => void): (value: T) => void {\n  const callbackRef = useRef(handler);\n  const fn = useRef((value: T) => {\n    callbackRef.current && callbackRef.current(value);\n  });\n  callbackRef.current = handler;\n\n  return fn.current;\n}\n", "// Clamps a value between an upper and lower bound.\n// We use ternary operators because it makes the minified code\n// 2 times shorter then `Math.min(Math.max(a,b),c)`\nexport const clamp = (number: number, min = 0, max = 1): number => {\n  return number > max ? max : number < min ? min : number;\n};\n", "import React, { useRef, useMemo, useEffect } from \"react\";\n\nimport { useEventCallback } from \"../../hooks/useEventCallback\";\nimport { clamp } from \"../../utils/clamp\";\n\nexport interface Interaction {\n  left: number;\n  top: number;\n}\n\n// Check if an event was triggered by touch\nconst isTouch = (event: MouseEvent | TouchEvent): event is TouchEvent => \"touches\" in event;\n\n// Finds a proper touch point by its identifier\nconst getTouchPoint = (touches: TouchList, touchId: null | number): Touch => {\n  for (let i = 0; i < touches.length; i++) {\n    if (touches[i].identifier === touchId) return touches[i];\n  }\n  return touches[0];\n};\n\n// Finds the proper window object to fix iframe embedding issues\nconst getParentWindow = (node?: HTMLDivElement | null): Window => {\n  return (node && node.ownerDocument.defaultView) || self;\n};\n\n// Returns a relative position of the pointer inside the node's bounding box\nconst getRelativePosition = (\n  node: HTMLDivElement,\n  event: MouseEvent | TouchEvent,\n  touchId: null | number\n): Interaction => {\n  const rect = node.getBoundingClientRect();\n\n  // Get user's pointer position from `touches` array if it's a `TouchEvent`\n  const pointer = isTouch(event) ? getTouchPoint(event.touches, touchId) : (event as MouseEvent);\n\n  return {\n    left: clamp((pointer.pageX - (rect.left + getParentWindow(node).pageXOffset)) / rect.width),\n    top: clamp((pointer.pageY - (rect.top + getParentWindow(node).pageYOffset)) / rect.height),\n  };\n};\n\n// Browsers introduced an intervention, making touch events passive by default.\n// This workaround removes `preventDefault` call from the touch handlers.\n// https://github.com/facebook/react/issues/19651\nconst preventDefaultMove = (event: MouseEvent | TouchEvent): void => {\n  !isTouch(event) && event.preventDefault();\n};\n\n// Prevent mobile browsers from handling mouse events (conflicting with touch ones).\n// If we detected a touch interaction before, we prefer reacting to touch events only.\nconst isInvalid = (event: MouseEvent | TouchEvent, hasTouch: boolean): boolean => {\n  return hasTouch && !isTouch(event);\n};\n\ninterface Props {\n  onMove: (interaction: Interaction) => void;\n  onKey: (offset: Interaction) => void;\n  children: React.ReactNode;\n}\n\nconst InteractiveBase = ({ onMove, onKey, ...rest }: Props) => {\n  const container = useRef<HTMLDivElement>(null);\n  const onMoveCallback = useEventCallback<Interaction>(onMove);\n  const onKeyCallback = useEventCallback<Interaction>(onKey);\n  const touchId = useRef<null | number>(null);\n  const hasTouch = useRef(false);\n\n  const [handleMoveStart, handleKeyDown, toggleDocumentEvents] = useMemo(() => {\n    const handleMoveStart = ({ nativeEvent }: React.MouseEvent | React.TouchEvent) => {\n      const el = container.current;\n      if (!el) return;\n\n      // Prevent text selection\n      preventDefaultMove(nativeEvent);\n\n      if (isInvalid(nativeEvent, hasTouch.current) || !el) return;\n\n      if (isTouch(nativeEvent)) {\n        hasTouch.current = true;\n        const changedTouches = nativeEvent.changedTouches || [];\n        if (changedTouches.length) touchId.current = changedTouches[0].identifier;\n      }\n\n      el.focus();\n      onMoveCallback(getRelativePosition(el, nativeEvent, touchId.current));\n      toggleDocumentEvents(true);\n    };\n\n    const handleMove = (event: MouseEvent | TouchEvent) => {\n      // Prevent text selection\n      preventDefaultMove(event);\n\n      // If user moves the pointer outside of the window or iframe bounds and release it there,\n      // `mouseup`/`touchend` won't be fired. In order to stop the picker from following the cursor\n      // after the user has moved the mouse/finger back to the document, we check `event.buttons`\n      // and `event.touches`. It allows us to detect that the user is just moving his pointer\n      // without pressing it down\n      const isDown = isTouch(event) ? event.touches.length > 0 : event.buttons > 0;\n\n      if (isDown && container.current) {\n        onMoveCallback(getRelativePosition(container.current, event, touchId.current));\n      } else {\n        toggleDocumentEvents(false);\n      }\n    };\n\n    const handleMoveEnd = () => toggleDocumentEvents(false);\n\n    const handleKeyDown = (event: React.KeyboardEvent) => {\n      const keyCode = event.which || event.keyCode;\n\n      // Ignore all keys except arrow ones\n      if (keyCode < 37 || keyCode > 40) return;\n      // Do not scroll page by arrow keys when document is focused on the element\n      event.preventDefault();\n      // Send relative offset to the parent component.\n      // We use codes (37←, 38↑, 39→, 40↓) instead of keys ('ArrowRight', 'ArrowDown', etc)\n      // to reduce the size of the library\n      onKeyCallback({\n        left: keyCode === 39 ? 0.05 : keyCode === 37 ? -0.05 : 0,\n        top: keyCode === 40 ? 0.05 : keyCode === 38 ? -0.05 : 0,\n      });\n    };\n\n    function toggleDocumentEvents(state?: boolean) {\n      const touch = hasTouch.current;\n      const el = container.current;\n      const parentWindow = getParentWindow(el);\n\n      // Add or remove additional pointer event listeners\n      const toggleEvent = state ? parentWindow.addEventListener : parentWindow.removeEventListener;\n      toggleEvent(touch ? \"touchmove\" : \"mousemove\", handleMove);\n      toggleEvent(touch ? \"touchend\" : \"mouseup\", handleMoveEnd);\n    }\n\n    return [handleMoveStart, handleKeyDown, toggleDocumentEvents];\n  }, [onKeyCallback, onMoveCallback]);\n\n  // Remove window event listeners before unmounting\n  useEffect(() => toggleDocumentEvents, [toggleDocumentEvents]);\n\n  return (\n    <div\n      {...rest}\n      onTouchStart={handleMoveStart}\n      onMouseDown={handleMoveStart}\n      className=\"react-colorful__interactive\"\n      ref={container}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      role=\"slider\"\n    />\n  );\n};\n\nexport const Interactive = React.memo(InteractiveBase);\n", "export const formatClassName = (names: unknown[]): string => names.filter(Boolean).join(\" \");\n", "import React from \"react\";\nimport { formatClassName } from \"../../utils/format\";\n\ninterface Props {\n  className?: string;\n  top?: number;\n  left: number;\n  color: string;\n}\n\nexport const Pointer = ({ className, color, left, top = 0.5 }: Props): JSX.Element => {\n  const nodeClassName = formatClassName([\"react-colorful__pointer\", className]);\n\n  const style = {\n    top: `${top * 100}%`,\n    left: `${left * 100}%`,\n  };\n\n  return (\n    <div className={nodeClassName} style={style}>\n      <div className=\"react-colorful__pointer-fill\" style={{ backgroundColor: color }} />\n    </div>\n  );\n};\n", "export const round = (number: number, digits = 0, base = Math.pow(10, digits)): number => {\n  return Math.round(base * number) / base;\n};\n", "import { round } from \"./round\";\nimport { RgbaColor, RgbColor, HslaColor, HslColor, HsvaColor, HsvColor } from \"../types\";\n\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\nconst angleUnits: Record<string, number> = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2),\n};\n\nexport const hexToHsva = (hex: string): HsvaColor => rgbaToHsva(hexToRgba(hex));\n\nexport const hexToRgba = (hex: string): RgbaColor => {\n  if (hex[0] === \"#\") hex = hex.substring(1);\n\n  if (hex.length < 6) {\n    return {\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: hex.length === 4 ? round(parseInt(hex[3] + hex[3], 16) / 255, 2) : 1,\n    };\n  }\n\n  return {\n    r: parseInt(hex.substring(0, 2), 16),\n    g: parseInt(hex.substring(2, 4), 16),\n    b: parseInt(hex.substring(4, 6), 16),\n    a: hex.length === 8 ? round(parseInt(hex.substring(6, 8), 16) / 255, 2) : 1,\n  };\n};\n\nexport const parseHue = (value: string, unit = \"deg\"): number => {\n  return Number(value) * (angleUnits[unit] || 1);\n};\n\nexport const hslaStringToHsva = (hslString: string): HsvaColor => {\n  const matcher = /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hslString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  });\n};\n\nexport const hslStringToHsva = hslaStringToHsva;\n\nexport const hslaToHsva = ({ h, s, l, a }: HslaColor): HsvaColor => {\n  s *= (l < 50 ? l : 100 - l) / 100;\n\n  return {\n    h: h,\n    s: s > 0 ? ((2 * s) / (l + s)) * 100 : 0,\n    v: l + s,\n    a,\n  };\n};\n\nexport const hsvaToHex = (hsva: HsvaColor): string => rgbaToHex(hsvaToRgba(hsva));\n\nexport const hsvaToHsla = ({ h, s, v, a }: HsvaColor): HslaColor => {\n  const hh = ((200 - s) * v) / 100;\n\n  return {\n    h: round(h),\n    s: round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n    l: round(hh / 2),\n    a: round(a, 2),\n  };\n};\n\nexport const hsvaToHslString = (hsva: HsvaColor): string => {\n  const { h, s, l } = hsvaToHsla(hsva);\n  return `hsl(${h}, ${s}%, ${l}%)`;\n};\n\nexport const hsvaToHsvString = (hsva: HsvaColor): string => {\n  const { h, s, v } = roundHsva(hsva);\n  return `hsv(${h}, ${s}%, ${v}%)`;\n};\n\nexport const hsvaToHsvaString = (hsva: HsvaColor): string => {\n  const { h, s, v, a } = roundHsva(hsva);\n  return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n};\n\nexport const hsvaToHslaString = (hsva: HsvaColor): string => {\n  const { h, s, l, a } = hsvaToHsla(hsva);\n  return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n};\n\nexport const hsvaToRgba = ({ h, s, v, a }: HsvaColor): RgbaColor => {\n  h = (h / 360) * 6;\n  s = s / 100;\n  v = v / 100;\n\n  const hh = Math.floor(h),\n    b = v * (1 - s),\n    c = v * (1 - (h - hh) * s),\n    d = v * (1 - (1 - h + hh) * s),\n    module = hh % 6;\n\n  return {\n    r: round([v, c, b, b, d, v][module] * 255),\n    g: round([d, v, v, c, b, b][module] * 255),\n    b: round([b, b, d, v, v, c][module] * 255),\n    a: round(a, 2),\n  };\n};\n\nexport const hsvaToRgbString = (hsva: HsvaColor): string => {\n  const { r, g, b } = hsvaToRgba(hsva);\n  return `rgb(${r}, ${g}, ${b})`;\n};\n\nexport const hsvaToRgbaString = (hsva: HsvaColor): string => {\n  const { r, g, b, a } = hsvaToRgba(hsva);\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n\nexport const hsvaStringToHsva = (hsvString: string): HsvaColor => {\n  const matcher = /hsva?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hsvString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return roundHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    v: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  });\n};\n\nexport const hsvStringToHsva = hsvaStringToHsva;\n\nexport const rgbaStringToHsva = (rgbaString: string): HsvaColor => {\n  const matcher = /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(rgbaString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1),\n  });\n};\n\nexport const rgbStringToHsva = rgbaStringToHsva;\n\nconst format = (number: number) => {\n  const hex = number.toString(16);\n  return hex.length < 2 ? \"0\" + hex : hex;\n};\n\nexport const rgbaToHex = ({ r, g, b, a }: RgbaColor): string => {\n  const alphaHex = a < 1 ? format(round(a * 255)) : \"\";\n  return \"#\" + format(r) + format(g) + format(b) + alphaHex;\n};\n\nexport const rgbaToHsva = ({ r, g, b, a }: RgbaColor): HsvaColor => {\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n\n  // prettier-ignore\n  const hh = delta\n    ? max === r\n      ? (g - b) / delta\n      : max === g\n        ? 2 + (b - r) / delta\n        : 4 + (r - g) / delta\n    : 0;\n\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? (delta / max) * 100 : 0),\n    v: round((max / 255) * 100),\n    a,\n  };\n};\n\nexport const roundHsva = (hsva: HsvaColor): HsvaColor => ({\n  h: round(hsva.h),\n  s: round(hsva.s),\n  v: round(hsva.v),\n  a: round(hsva.a, 2),\n});\n\nexport const rgbaToRgb = ({ r, g, b }: RgbaColor): RgbColor => ({ r, g, b });\n\nexport const hslaToHsl = ({ h, s, l }: HslaColor): HslColor => ({ h, s, l });\n\nexport const hsvaToHsv = (hsva: HsvaColor): HsvColor => {\n  const { h, s, v } = roundHsva(hsva);\n  return { h, s, v };\n};\n", "import React from \"react\";\n\nimport { Interactive, Interaction } from \"./Interactive\";\nimport { Pointer } from \"./Pointer\";\n\nimport { hsvaToHslString } from \"../../utils/convert\";\nimport { formatClassName } from \"../../utils/format\";\nimport { clamp } from \"../../utils/clamp\";\nimport { round } from \"../../utils/round\";\n\ninterface Props {\n  className?: string;\n  hue: number;\n  onChange: (newHue: { h: number }) => void;\n}\n\nconst HueBase = ({ className, hue, onChange }: Props) => {\n  const handleMove = (interaction: Interaction) => {\n    onChange({ h: 360 * interaction.left });\n  };\n\n  const handleKey = (offset: Interaction) => {\n    // Hue measured in degrees of the color circle ranging from 0 to 360\n    onChange({\n      h: clamp(hue + offset.left * 360, 0, 360),\n    });\n  };\n\n  const nodeClassName = formatClassName([\"react-colorful__hue\", className]);\n\n  return (\n    <div className={nodeClassName}>\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Hue\"\n        aria-valuenow={round(hue)}\n        aria-valuemax=\"360\"\n        aria-valuemin=\"0\"\n      >\n        <Pointer\n          className=\"react-colorful__hue-pointer\"\n          left={hue / 360}\n          color={hsvaToHslString({ h: hue, s: 100, v: 100, a: 1 })}\n        />\n      </Interactive>\n    </div>\n  );\n};\n\nexport const Hue = React.memo(HueBase);\n", "import React from \"react\";\nimport { Interactive, Interaction } from \"./Interactive\";\nimport { Pointer } from \"./Pointer\";\nimport { HsvaColor } from \"../../types\";\nimport { hsvaToHslString } from \"../../utils/convert\";\nimport { clamp } from \"../../utils/clamp\";\nimport { round } from \"../../utils/round\";\n\ninterface Props {\n  hsva: HsvaColor;\n  onChange: (newColor: { s: number; v: number }) => void;\n}\n\nconst SaturationBase = ({ hsva, onChange }: Props) => {\n  const handleMove = (interaction: Interaction) => {\n    onChange({\n      s: interaction.left * 100,\n      v: 100 - interaction.top * 100,\n    });\n  };\n\n  const handleKey = (offset: Interaction) => {\n    // Saturation and brightness always fit into [0, 100] range\n    onChange({\n      s: clamp(hsva.s + offset.left * 100, 0, 100),\n      v: clamp(hsva.v - offset.top * 100, 0, 100),\n    });\n  };\n\n  const containerStyle = {\n    backgroundColor: hsvaToHslString({ h: hsva.h, s: 100, v: 100, a: 1 }),\n  };\n\n  return (\n    <div className=\"react-colorful__saturation\" style={containerStyle}>\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Color\"\n        aria-valuetext={`Saturation ${round(hsva.s)}%, Brightness ${round(hsva.v)}%`}\n      >\n        <Pointer\n          className=\"react-colorful__saturation-pointer\"\n          top={1 - hsva.v / 100}\n          left={hsva.s / 100}\n          color={hsvaToHslString(hsva)}\n        />\n      </Interactive>\n    </div>\n  );\n};\n\nexport const Saturation = React.memo(SaturationBase);\n", "import { hexToRgba } from \"./convert\";\nimport { ObjectColor } from \"../types\";\n\nexport const equalColorObjects = (first: ObjectColor, second: ObjectColor): boolean => {\n  if (first === second) return true;\n\n  for (const prop in first) {\n    // The following allows for a type-safe calling of this function (first & second have to be HSL, HSV, or RGB)\n    // with type-unsafe iterating over object keys. TS does not allow this without an index (`[key: string]: number`)\n    // on an object to define how iteration is normally done. To ensure extra keys are not allowed on our types,\n    // we must cast our object to unknown (as RGB demands `r` be a key, while `Record<string, x>` does not care if\n    // there is or not), and then as a type TS can iterate over.\n    if (\n      ((first as unknown) as Record<string, number>)[prop] !==\n      ((second as unknown) as Record<string, number>)[prop]\n    )\n      return false;\n  }\n\n  return true;\n};\n\nexport const equalColorString = (first: string, second: string): boolean => {\n  return first.replace(/\\s/g, \"\") === second.replace(/\\s/g, \"\");\n};\n\nexport const equalHex = (first: string, second: string): boolean => {\n  if (first.toLowerCase() === second.toLowerCase()) return true;\n\n  // To compare colors like `#FFF` and `ffffff` we convert them into RGB objects\n  return equalColorObjects(hexToRgba(first), hexToRgba(second));\n};\n", "import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { ColorModel, AnyColor, HsvaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { useEventCallback } from \"./useEventCallback\";\n\nexport function useColorManipulation<T extends AnyColor>(\n  colorModel: ColorModel<T>,\n  color: T,\n  onChange?: (color: T) => void\n): [HsvaColor, (color: Partial<HsvaColor>) => void] {\n  // Save onChange callback in the ref for avoiding \"useCallback hell\"\n  const onChangeCallback = useEventCallback<T>(onChange);\n\n  // No matter which color model is used (HEX, RGB(A) or HSL(A)),\n  // all internal calculations are based on HSVA model\n  const [hsva, updateHsva] = useState<HsvaColor>(() => colorModel.toHsva(color));\n\n  // By using this ref we're able to prevent extra updates\n  // and the effects recursion during the color conversion\n  const cache = useRef({ color, hsva });\n\n  // Update local HSVA-value if `color` property value is changed,\n  // but only if that's not the same color that we just sent to the parent\n  useEffect(() => {\n    if (!colorModel.equal(color, cache.current.color)) {\n      const newHsva = colorModel.toHsva(color);\n      cache.current = { hsva: newHsva, color };\n      updateHsva(newHsva);\n    }\n  }, [color, colorModel]);\n\n  // Trigger `onChange` callback only if an updated color is different from cached one;\n  // save the new color to the ref to prevent unnecessary updates\n  useEffect(() => {\n    let newColor;\n    if (\n      !equalColorObjects(hsva, cache.current.hsva) &&\n      !colorModel.equal((newColor = colorModel.fromHsva(hsva)), cache.current.color)\n    ) {\n      cache.current = { hsva, color: newColor };\n      onChangeCallback(newColor);\n    }\n  }, [hsva, colorModel, onChangeCallback]);\n\n  // Merge the current HSVA color object with updated params.\n  // For example, when a child component sends `h` or `s` only\n  const handleChange = useCallback((params: Partial<HsvaColor>) => {\n    updateHsva((current) => Object.assign({}, current, params));\n  }, []);\n\n  return [hsva, handleChange];\n}\n", "declare const __webpack_nonce__: string | undefined;\nlet nonce: string | undefined;\n\n/**\n * Returns a nonce hash included by Webpack or the one defined manually by developer.\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce\n * https://webpack.js.org/guides/csp/\n */\nexport const getNonce = (): string | undefined => {\n  if (nonce) return nonce;\n  if (typeof __webpack_nonce__ !== \"undefined\") return __webpack_nonce__;\n  return undefined;\n};\n\n/**\n * Signs the style tag with a base64-encoded string (nonce) to conforms to Content Security Policies.\n * This function has to be invoked before any picker is rendered if you aren't using Webpack for CSP.\n */\nexport const setNonce = (hash: string): void => {\n  nonce = hash;\n};\n", "import { useLayoutEffect, useEffect } from \"react\";\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nexport const useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n", "import { RefObject } from \"react\";\n\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { getNonce } from \"../utils/nonce\";\n\n// Bundler is configured to load this as a processed minified CSS-string\nimport styles from \"../css/styles.css\";\n\nconst styleElementMap: Map<Document, HTMLStyleElement> = new Map();\n\n/**\n * Injects CSS code into the document's <head>\n */\nexport const useStyleSheet = (nodeRef: RefObject<HTMLDivElement>): void => {\n  useIsomorphicLayoutEffect(() => {\n    const parentDocument = nodeRef.current ? nodeRef.current.ownerDocument : document;\n\n    if (typeof parentDocument !== \"undefined\" && !styleElementMap.has(parentDocument)) {\n      const styleElement = parentDocument.createElement(\"style\");\n      styleElement.innerHTML = styles;\n      styleElementMap.set(parentDocument, styleElement);\n\n      // Conform to CSP rules by setting `nonce` attribute to the inline styles\n      const nonce = getNonce();\n      if (nonce) styleElement.setAttribute(\"nonce\", nonce);\n\n      parentDocument.head.appendChild(styleElement);\n    }\n  }, []);\n};\n", "import React, { useRef } from \"react\";\n\nimport { Hue } from \"./Hue\";\nimport { Saturation } from \"./Saturation\";\n\nimport { ColorModel, ColorPickerBaseProps, AnyColor } from \"../../types\";\nimport { useColorManipulation } from \"../../hooks/useColorManipulation\";\nimport { useStyleSheet } from \"../../hooks/useStyleSheet\";\nimport { formatClassName } from \"../../utils/format\";\n\ninterface Props<T extends AnyColor> extends Partial<ColorPickerBaseProps<T>> {\n  colorModel: ColorModel<T>;\n}\n\nexport const ColorPicker = <T extends AnyColor>({\n  className,\n  colorModel,\n  color = colorModel.defaultColor,\n  onChange,\n  ...rest\n}: Props<T>): JSX.Element => {\n  const nodeRef = useRef<HTMLDivElement>(null);\n  useStyleSheet(nodeRef);\n\n  const [hsva, updateHsva] = useColorManipulation<T>(colorModel, color, onChange);\n\n  const nodeClassName = formatClassName([\"react-colorful\", className]);\n\n  return (\n    <div {...rest} ref={nodeRef} className={nodeClassName}>\n      <Saturation hsva={hsva} onChange={updateHsva} />\n      <Hue hue={hsva.h} onChange={updateHsva} className=\"react-colorful__last-control\" />\n    </div>\n  );\n};\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalHex } from \"../utils/compare\";\nimport { hexToHsva, hsvaToHex } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"000\",\n  toHsva: hexToHsva,\n  fromHsva: ({ h, s, v }) => hsvaToHex({ h, s, v, a: 1 }),\n  equal: equalHex,\n};\n\nexport const HexColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { Interactive, Interaction } from \"./Interactive\";\nimport { Pointer } from \"./Pointer\";\n\nimport { hsvaToHslaString } from \"../../utils/convert\";\nimport { formatClassName } from \"../../utils/format\";\nimport { clamp } from \"../../utils/clamp\";\nimport { round } from \"../../utils/round\";\nimport { HsvaColor } from \"../../types\";\n\ninterface Props {\n  className?: string;\n  hsva: HsvaColor;\n  onChange: (newAlpha: { a: number }) => void;\n}\n\nexport const Alpha = ({ className, hsva, onChange }: Props): JSX.Element => {\n  const handleMove = (interaction: Interaction) => {\n    onChange({ a: interaction.left });\n  };\n\n  const handleKey = (offset: Interaction) => {\n    // Alpha always fit into [0, 1] range\n    onChange({ a: clamp(hsva.a + offset.left) });\n  };\n\n  // We use `Object.assign` instead of the spread operator\n  // to prevent adding the polyfill (about 150 bytes gzipped)\n  const colorFrom = hsvaToHslaString(Object.assign({}, hsva, { a: 0 }));\n  const colorTo = hsvaToHslaString(Object.assign({}, hsva, { a: 1 }));\n\n  const gradientStyle = {\n    backgroundImage: `linear-gradient(90deg, ${colorFrom}, ${colorTo})`,\n  };\n\n  const nodeClassName = formatClassName([\"react-colorful__alpha\", className]);\n  const ariaValue = round(hsva.a * 100);\n\n  return (\n    <div className={nodeClassName}>\n      <div className=\"react-colorful__alpha-gradient\" style={gradientStyle} />\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Alpha\"\n        aria-valuetext={`${ariaValue}%`}\n        aria-valuenow={ariaValue}\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n      >\n        <Pointer\n          className=\"react-colorful__alpha-pointer\"\n          left={hsva.a}\n          color={hsvaToHslaString(hsva)}\n        />\n      </Interactive>\n    </div>\n  );\n};\n", "import React, { useRef } from \"react\";\n\nimport { Hue } from \"./Hue\";\nimport { Saturation } from \"./Saturation\";\nimport { Alpha } from \"./Alpha\";\n\nimport { ColorModel, ColorPickerBaseProps, AnyColor } from \"../../types\";\nimport { useColorManipulation } from \"../../hooks/useColorManipulation\";\nimport { useStyleSheet } from \"../../hooks/useStyleSheet\";\nimport { formatClassName } from \"../../utils/format\";\n\ninterface Props<T extends AnyColor> extends Partial<ColorPickerBaseProps<T>> {\n  colorModel: ColorModel<T>;\n}\n\nexport const AlphaColorPicker = <T extends AnyColor>({\n  className,\n  colorModel,\n  color = colorModel.defaultColor,\n  onChange,\n  ...rest\n}: Props<T>): JSX.Element => {\n  const nodeRef = useRef<HTMLDivElement>(null);\n  useStyleSheet(nodeRef);\n\n  const [hsva, updateHsva] = useColorManipulation<T>(colorModel, color, onChange);\n\n  const nodeClassName = formatClassName([\"react-colorful\", className]);\n\n  return (\n    <div {...rest} ref={nodeRef} className={nodeClassName}>\n      <Saturation hsva={hsva} onChange={updateHsva} />\n      <Hue hue={hsva.h} onChange={updateHsva} />\n      <Alpha hsva={hsva} onChange={updateHsva} className=\"react-colorful__last-control\" />\n    </div>\n  );\n};\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalHex } from \"../utils/compare\";\nimport { hexToHsva, hsvaToHex } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"0001\",\n  toHsva: hexToHsva,\n  fromHsva: hsvaToHex,\n  equal: equalHex,\n};\n\nexport const HexAlphaColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HslaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { hslaToHsva, hsvaToHsla } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HslaColor> = {\n  defaultColor: { h: 0, s: 0, l: 0, a: 1 },\n  toHsva: hslaToHsva,\n  fromHsva: hsvaToHsla,\n  equal: equalColorObjects,\n};\n\nexport const HslaColorPicker = (props: Partial<ColorPickerBaseProps<HslaColor>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hslaStringToHsva, hsvaToHslaString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsla(0, 0%, 0%, 1)\",\n  toHsva: hslaStringToHsva,\n  fromHsva: hsvaToHslaString,\n  equal: equalColorString,\n};\n\nexport const HslaStringColorPicker = (\n  props: Partial<ColorPickerBaseProps<string>>\n): JSX.Element => <AlphaColorPicker {...props} colorModel={colorModel} />;\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HslColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { hslaToHsva, hsvaToHsla, hslaToHsl } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HslColor> = {\n  defaultColor: { h: 0, s: 0, l: 0 },\n  toHsva: ({ h, s, l }) => hslaToHsva({ h, s, l, a: 1 }),\n  fromHsva: (hsva) => hslaToHsl(hsvaToHsla(hsva)),\n  equal: equalColorObjects,\n};\n\nexport const HslColorPicker = (props: Partial<ColorPickerBaseProps<HslColor>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hslStringToHsva, hsvaToHslString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsl(0, 0%, 0%)\",\n  toHsva: hslStringToHsva,\n  fromHsva: hsvaToHslString,\n  equal: equalColorString,\n};\n\nexport const HslStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HsvaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { roundHsva } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HsvaColor> = {\n  defaultColor: { h: 0, s: 0, v: 0, a: 1 },\n  toHsva: (hsva) => hsva,\n  fromHsva: roundHsva,\n  equal: equalColorObjects,\n};\n\nexport const HsvaColorPicker = (props: Partial<ColorPickerBaseProps<HsvaColor>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hsvaStringToHsva, hsvaToHsvaString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsva(0, 0%, 0%, 1)\",\n  toHsva: hsvaStringToHsva,\n  fromHsva: hsvaToHsvaString,\n  equal: equalColorString,\n};\n\nexport const HsvaStringColorPicker = (\n  props: Partial<ColorPickerBaseProps<string>>\n): JSX.Element => <AlphaColorPicker {...props} colorModel={colorModel} />;\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HsvColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { hsvaToHsv } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HsvColor> = {\n  defaultColor: { h: 0, s: 0, v: 0 },\n  toHsva: ({ h, s, v }) => ({ h, s, v, a: 1 }),\n  fromHsva: hsvaToHsv,\n  equal: equalColorObjects,\n};\n\nexport const HsvColorPicker = (props: Partial<ColorPickerBaseProps<HsvColor>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hsvStringToHsva, hsvaToHsvString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsv(0, 0%, 0%)\",\n  toHsva: hsvStringToHsva,\n  fromHsva: hsvaToHsvString,\n  equal: equalColorString,\n};\n\nexport const HsvStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, RgbaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { rgbaToHsva, hsvaToRgba } from \"../utils/convert\";\n\nconst colorModel: ColorModel<RgbaColor> = {\n  defaultColor: { r: 0, g: 0, b: 0, a: 1 },\n  toHsva: rgbaToHsva,\n  fromHsva: hsvaToRgba,\n  equal: equalColorObjects,\n};\n\nexport const RgbaColorPicker = (props: Partial<ColorPickerBaseProps<RgbaColor>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { rgbaStringToHsva, hsvaToRgbaString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"rgba(0, 0, 0, 1)\",\n  toHsva: rgbaStringToHsva,\n  fromHsva: hsvaToRgbaString,\n  equal: equalColorString,\n};\n\nexport const RgbaStringColorPicker = (\n  props: Partial<ColorPickerBaseProps<string>>\n): JSX.Element => <AlphaColorPicker {...props} colorModel={colorModel} />;\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, RgbColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { rgbaToHsva, hsvaToRgba, rgbaToRgb } from \"../utils/convert\";\n\nconst colorModel: ColorModel<RgbColor> = {\n  defaultColor: { r: 0, g: 0, b: 0 },\n  toHsva: ({ r, g, b }) => rgbaToHsva({ r, g, b, a: 1 }),\n  fromHsva: (hsva) => rgbaToRgb(hsvaToRgba(hsva)),\n  equal: equalColorObjects,\n};\n\nexport const RgbColorPicker = (props: Partial<ColorPickerBaseProps<RgbColor>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { rgbStringToHsva, hsvaToRgbString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"rgb(0, 0, 0)\",\n  toHsva: rgbStringToHsva,\n  fromHsva: hsvaToRgbString,\n  equal: equalColorString,\n};\n\nexport const RgbStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n", "const matcher = /^#?([0-9A-F]{3,8})$/i;\n\nexport const validHex = (value: string, alpha?: boolean): boolean => {\n  const match = matcher.exec(value);\n  const length = match ? match[1].length : 0;\n\n  return (\n    length === 3 || // '#rgb' format\n    length === 6 || // '#rrggbb' format\n    (!!alpha && length === 4) || // '#rgba' format\n    (!!alpha && length === 8) // '#rrggbbaa' format\n  );\n};\n", "import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { useEventCallback } from \"../../hooks/useEventCallback\";\nimport { ColorInputBaseProps } from \"../../types\";\n\ninterface Props extends ColorInputBaseProps {\n  /** Blocks typing invalid characters and limits string length */\n  escape: (value: string) => string;\n  /** Checks that value is valid color string */\n  validate: (value: string) => boolean;\n  /** Processes value before displaying it in the input */\n  format?: (value: string) => string;\n  /** Processes value before sending it in `onChange` */\n  process?: (value: string) => string;\n}\n\nexport const ColorInput = (props: Props): JSX.Element => {\n  const { color = \"\", onChange, onBlur, escape, validate, format, process, ...rest } = props;\n  const [value, setValue] = useState(() => escape(color));\n  const onChangeCallback = useEventCallback<string>(onChange);\n  const onBlurCallback = useEventCallback<React.FocusEvent<HTMLInputElement>>(onBlur);\n\n  // Trigger `onChange` handler only if the input value is a valid color\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const inputValue = escape(e.target.value);\n      setValue(inputValue);\n      if (validate(inputValue)) onChangeCallback(process ? process(inputValue) : inputValue);\n    },\n    [escape, process, validate, onChangeCallback]\n  );\n\n  // Take the color from props if the last typed color (in local state) is not valid\n  const handleBlur = useCallback(\n    (e: React.FocusEvent<HTMLInputElement>) => {\n      if (!validate(e.target.value)) setValue(escape(color));\n      onBlurCallback(e);\n    },\n    [color, escape, validate, onBlurCallback]\n  );\n\n  // Update the local state when `color` property value is changed\n  useEffect(() => {\n    setValue(escape(color));\n  }, [color, escape]);\n\n  return (\n    <input\n      {...rest}\n      value={format ? format(value) : value}\n      spellCheck=\"false\" // the element should not be checked for spelling errors\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n", "import React, { useCallback } from \"react\";\nimport { ColorInputBaseProps } from \"../types\";\n\nimport { validHex } from \"../utils/validate\";\nimport { ColorInput } from \"./common/ColorInput\";\n\ninterface HexColorInputProps extends ColorInputBaseProps {\n  /** Enables `#` prefix displaying */\n  prefixed?: boolean;\n  /** Allows `#rgba` and `#rrggbbaa` color formats */\n  alpha?: boolean;\n}\n\n/** Adds \"#\" symbol to the beginning of the string */\nconst prefix = (value: string) => \"#\" + value;\n\nexport const HexColorInput = (props: HexColorInputProps): JSX.Element => {\n  const { prefixed, alpha, ...rest } = props;\n\n  /** Escapes all non-hexadecimal characters including \"#\" */\n  const escape = useCallback(\n    (value: string) => value.replace(/([^0-9A-F]+)/gi, \"\").substring(0, alpha ? 8 : 6),\n    [alpha]\n  );\n\n  /** Validates hexadecimal strings */\n  const validate = useCallback((value: string) => validHex(value, alpha), [alpha]);\n\n  return (\n    <ColorInput\n      {...rest}\n      escape={escape}\n      format={prefixed ? prefix : undefined}\n      process={prefix}\n      validate={validate}\n    />\n  );\n};\n", "// A is m x n. B is n x p. product is m x p.\nexport default function multiplyMatrices (A, B) {\n\tlet m = A.length;\n\n\tif (!Array.isArray(A[0])) {\n\t\t// A is vector, convert to [[a, b, c, ...]]\n\t\tA = [A];\n\t}\n\n\tif (!Array.isArray(B[0])) {\n\t\t// B is vector, convert to [[a], [b], [c], ...]]\n\t\tB = B.map(x => [x]);\n\t}\n\n\tlet p = B[0].length;\n\tlet B_cols = B[0].map((_, i) => B.map(x => x[i])); // transpose B\n\tlet product = A.map(row => B_cols.map(col => {\n\t\tlet ret = 0;\n\n\t\tif (!Array.isArray(row)) {\n\t\t\tfor (let c of col) {\n\t\t\t\tret += row * c;\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\tfor (let i = 0; i < row.length; i++) {\n\t\t\tret += row[i] * (col[i] || 0);\n\t\t}\n\n\t\treturn ret;\n\t}));\n\n\tif (m === 1) {\n\t\tproduct = product[0]; // Avoid [[a, b, c, ...]]\n\t}\n\n\tif (p === 1) {\n\t\treturn product.map(x => x[0]); // Avoid [[a], [b], [c], ...]]\n\t}\n\n\treturn product;\n}\n", "/**\n * Various utility functions\n */\n\nexport {default as multiplyMatrices} from \"./multiply-matrices.js\";\n\n/**\n * Check if a value is a string (including a String object)\n * @param {*} str - Value to check\n * @returns {boolean}\n */\nexport function isString (str) {\n\treturn type(str) === \"string\";\n}\n\n/**\n * Determine the internal JavaScript [[Class]] of an object.\n * @param {*} o - Value to check\n * @returns {string}\n */\nexport function type (o) {\n\tlet str = Object.prototype.toString.call(o);\n\n\treturn (str.match(/^\\[object\\s+(.*?)\\]$/)[1] || \"\").toLowerCase();\n}\n\nexport function serializeNumber (n, {precision, unit }) {\n\tif (isNone(n)) {\n\t\treturn \"none\";\n\t}\n\n\treturn toPrecision(n, precision) + (unit ?? \"\");\n}\n\n/**\n * Check if a value corresponds to a none argument\n * @param {*} n - Value to check\n * @returns {boolean}\n */\nexport function isNone (n) {\n\treturn Number.isNaN(n) || (n instanceof Number && n?.none);\n}\n\n/**\n * Replace none values with 0\n */\nexport function skipNone (n) {\n\treturn isNone(n) ? 0 : n;\n}\n\n/**\n * Round a number to a certain number of significant digits\n * @param {number} n - The number to round\n * @param {number} precision - Number of significant digits\n */\nexport function toPrecision (n, precision) {\n\tif (n === 0) {\n\t\treturn 0;\n\t}\n\tlet integer = ~~n;\n\tlet digits = 0;\n\tif (integer && precision) {\n\t\tdigits = ~~Math.log10(Math.abs(integer)) + 1;\n\t}\n\tconst multiplier = 10.0 ** (precision - digits);\n\treturn Math.floor(n * multiplier + 0.5) / multiplier;\n}\n\nconst angleFactor = {\n\tdeg: 1,\n\tgrad: 0.9,\n\trad: 180 / Math.PI,\n\tturn: 360,\n};\n\n/**\n* Parse a CSS function, regardless of its name and arguments\n* @param String str String to parse\n* @return {{name, args, rawArgs}}\n*/\nexport function parseFunction (str) {\n\tif (!str) {\n\t\treturn;\n\t}\n\n\tstr = str.trim();\n\n\tconst isFunctionRegex = /^([a-z]+)\\((.+?)\\)$/i;\n\tconst isNumberRegex = /^-?[\\d.]+$/;\n\tconst unitValueRegex = /%|deg|g?rad|turn$/;\n\tconst singleArgument = /\\/?\\s*(none|[-\\w.]+(?:%|deg|g?rad|turn)?)/g;\n\tlet parts = str.match(isFunctionRegex);\n\n\tif (parts) {\n\t\t// It is a function, parse args\n\t\tlet args = [];\n\t\tparts[2].replace(singleArgument, ($0, rawArg) => {\n\t\t\tlet match = rawArg.match(unitValueRegex);\n\t\t\tlet arg = rawArg;\n\n\t\t\tif (match) {\n\t\t\t\tlet unit = match[0];\n\t\t\t\t// Drop unit from value\n\t\t\t\tlet unitlessArg = arg.slice(0, -unit.length);\n\n\t\t\t\tif (unit === \"%\") {\n\t\t\t\t\t// Convert percentages to 0-1 numbers\n\t\t\t\t\targ = new Number(unitlessArg / 100);\n\t\t\t\t\targ.type = \"<percentage>\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Multiply angle by appropriate factor for its unit\n\t\t\t\t\targ = new Number(unitlessArg * angleFactor[unit]);\n\t\t\t\t\targ.type = \"<angle>\";\n\t\t\t\t\targ.unit = unit;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isNumberRegex.test(arg)) {\n\t\t\t\t// Convert numerical args to numbers\n\t\t\t\targ = new Number(arg);\n\t\t\t\targ.type = \"<number>\";\n\t\t\t}\n\t\t\telse if (arg === \"none\") {\n\t\t\t\targ = new Number(NaN);\n\t\t\t\targ.none = true;\n\t\t\t}\n\n\t\t\tif ($0.startsWith(\"/\")) {\n\t\t\t\t// It's alpha\n\t\t\t\targ = arg instanceof Number ? arg : new Number(arg);\n\t\t\t\targ.alpha = true;\n\t\t\t}\n\n\t\t\tif (typeof arg === \"object\" && arg instanceof Number) {\n\t\t\t\targ.raw = rawArg;\n\t\t\t}\n\n\t\t\targs.push(arg);\n\t\t});\n\n\t\treturn {\n\t\t\tname: parts[1].toLowerCase(),\n\t\t\trawName: parts[1],\n\t\t\trawArgs: parts[2],\n\t\t\t// An argument could be (as of css-color-4):\n\t\t\t// a number, percentage, degrees (hue), ident (in color())\n\t\t\targs,\n\t\t};\n\t}\n}\n\nexport function last (arr) {\n\treturn arr[arr.length - 1];\n}\n\nexport function interpolate (start, end, p) {\n\tif (isNaN(start)) {\n\t\treturn end;\n\t}\n\n\tif (isNaN(end)) {\n\t\treturn start;\n\t}\n\n\treturn start + (end - start) * p;\n}\n\nexport function interpolateInv (start, end, value) {\n\treturn (value - start) / (end - start);\n}\n\nexport function mapRange (from, to, value) {\n\treturn interpolate(to[0], to[1], interpolateInv(from[0], from[1], value));\n}\n\nexport function parseCoordGrammar (coordGrammars) {\n\treturn coordGrammars.map(coordGrammar => {\n\t\treturn coordGrammar.split(\"|\").map(type => {\n\t\t\ttype = type.trim();\n\t\t\tlet range = type.match(/^(<[a-z]+>)\\[(-?[.\\d]+),\\s*(-?[.\\d]+)\\]?$/);\n\n\t\t\tif (range) {\n\t\t\t\tlet ret = new String(range[1]);\n\t\t\t\tret.range = [+range[2], +range[3]];\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn type;\n\t\t});\n\t});\n}\n\n/**\n * Clamp value between the minimum and maximum\n * @param {number} min minimum value to return\n * @param {number} val the value to return if it is between min and max\n * @param {number} max maximum value to return\n * @returns number\n */\nexport function clamp (min, val, max) {\n\treturn Math.max(Math.min(max, val), min);\n}\n\n/**\n * Copy sign of one value to another.\n * @param {number} - to number to copy sign to\n * @param {number} - from number to copy sign from\n * @returns number\n */\nexport function copySign (to, from) {\n\treturn Math.sign(to) === Math.sign(from) ? to : -to;\n}\n\n/**\n * Perform pow on a signed number and copy sign to result\n * @param {number} - base the base number\n * @param {number} - exp the exponent\n * @returns number\n */\nexport function spow (base, exp) {\n\treturn copySign(Math.abs(base) ** exp, base);\n}\n\n/**\n * Perform a divide, but return zero if the numerator is zero\n * @param {number} n - the numerator\n * @param {number} d - the denominator\n * @returns number\n */\nexport function zdiv (n, d) {\n\treturn (d === 0) ? 0 : n / d;\n}\n\n/**\n * Perform a bisect on a sorted list and locate the insertion point for\n * a value in arr to maintain sorted order.\n * @param {number[]} arr - array of sorted numbers\n * @param {number} value - value to find insertion point for\n * @param {number} lo - used to specify a the low end of a subset of the list\n * @param {number} hi - used to specify a the high end of a subset of the list\n * @returns number\n */\nexport function bisectLeft (arr, value, lo = 0, hi = arr.length) {\n\twhile (lo < hi) {\n\t\tconst mid = (lo + hi) >> 1;\n\t\tif (arr[mid] < value) {\n\t\t\tlo = mid + 1;\n\t\t}\n\t\telse {\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\n", "/**\n * A class for adding deep extensibility to any piece of JS code\n */\nexport class Hooks {\n\tadd (name, callback, first) {\n\t\tif (typeof arguments[0] != \"string\") {\n\t\t\t// Multiple hooks\n\t\t\tfor (var name in arguments[0]) {\n\t\t\t\tthis.add(name, arguments[0][name], arguments[1]);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t(Array.isArray(name) ? name : [name]).forEach(function (name) {\n\t\t\tthis[name] = this[name] || [];\n\n\t\t\tif (callback) {\n\t\t\t\tthis[name][first ? \"unshift\" : \"push\"](callback);\n\t\t\t}\n\t\t}, this);\n\t}\n\n\trun (name, env) {\n\t\tthis[name] = this[name] || [];\n\t\tthis[name].forEach(function (callback) {\n\t\t\tcallback.call(env && env.context ? env.context : env, env);\n\t\t});\n\t}\n}\n\n/**\n * The instance of {@link Hooks} used throughout Color.js\n */\nconst hooks = new Hooks();\n\nexport default hooks;\n", "import hooks from \"./hooks.js\";\nimport {multiplyMatrices} from \"./util.js\";\n\nexport const WHITES = {\n\t// for compatibility, the four-digit chromaticity-derived ones everyone else uses\n\tD50: [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585],\n\tD65: [0.3127 / 0.3290, 1.00000, (1.0 - 0.3127 - 0.3290) / 0.3290],\n};\n\nexport function getWhite (name) {\n\tif (Array.isArray(name)) {\n\t\treturn name;\n\t}\n\n\treturn WHITES[name];\n}\n\n// Adapt XYZ from white point W1 to W2\nexport default function adapt (W1, W2, XYZ, options = {}) {\n\tW1 = getWhite(W1);\n\tW2 = getWhite(W2);\n\n\tif (!W1 || !W2) {\n\t\tthrow new TypeError(`Missing white point to convert ${!W1 ? \"from\" : \"\"}${!W1 && !W2 ? \"/\" : \"\"}${!W2 ? \"to\" : \"\"}`);\n\t}\n\n\tif (W1 === W2) {\n\t\t// Same whitepoints, no conversion needed\n\t\treturn XYZ;\n\t}\n\n\tlet env = {W1, W2, XYZ, options};\n\n\thooks.run(\"chromatic-adaptation-start\", env);\n\n\tif (!env.M) {\n\t\tif (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {\n\t\t\tenv.M = [\n\t\t\t\t[ 1.0479297925449969, 0.022946870601609652, -0.05019226628920524 ],\n\t\t\t\t[ 0.02962780877005599, 0.9904344267538799, -0.017073799063418826 ],\n\t\t\t\t[ -0.009243040646204504, 0.015055191490298152, 0.7518742814281371 ],\n\t\t\t];\n\t\t}\n\t\telse if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {\n\n\t\t\tenv.M = [\n\t\t\t\t[ 0.955473421488075, -0.02309845494876471, 0.06325924320057072 ],\n\t\t\t\t[ -0.0283697093338637, 1.0099953980813041, 0.021041441191917323 ],\n\t\t\t\t[ 0.012314014864481998, -0.020507649298898964, 1.330365926242124 ],\n\t\t\t];\n\t\t}\n\t}\n\n\thooks.run(\"chromatic-adaptation-end\", env);\n\n\tif (env.M) {\n\t\treturn multiplyMatrices(env.M, env.XYZ);\n\t}\n\telse {\n\t\tthrow new TypeError(\"Only Bradford CAT with white points D50 and D65 supported for now.\");\n\t}\n}\n", "// Global defaults one may want to configure\nexport default {\n\tgamut_mapping: \"css\",\n\tprecision: 5,\n\tdeltaE: \"76\", // Default deltaE method\n\tverbose: globalThis?.process?.env?.NODE_ENV?.toLowerCase() !== \"test\",\n\twarn: function warn (msg) {\n\t\tif (this.verbose) {\n\t\t\tglobalThis?.console?.warn?.(msg);\n\t\t}\n\t},\n};\n", "import * as util from \"./util.js\";\nimport hooks from \"./hooks.js\";\nimport ColorSpace from \"./space.js\";\nimport defaults from \"./defaults.js\";\n\nconst noneTypes = new Set([\"<number>\", \"<percentage>\", \"<angle>\"]);\n\n/**\n * Validates the coordinates of a color against a format's coord grammar and\n * maps the coordinates to the range or refRange of the coordinates.\n * @param {ColorSpace} space - Colorspace the coords are in\n * @param {object} format - the format object to validate against\n * @param {string} name - the name of the color function. e.g. \"oklab\" or \"color\"\n * @returns {object[]} - an array of type metadata for each coordinate\n */\nfunction coerceCoords (space, format, name, coords) {\n\tlet types = Object.entries(space.coords).map(([id, coordMeta], i) => {\n\t\tlet coordGrammar = format.coordGrammar[i];\n\t\tlet arg = coords[i];\n\t\tlet providedType = arg?.type;\n\n\t\t// Find grammar alternative that matches the provided type\n\t\t// Non-strict equals is intentional because we are comparing w/ string objects\n\t\tlet type;\n\t\tif (arg.none) {\n\t\t\ttype = coordGrammar.find(c => noneTypes.has(c));\n\t\t}\n\t\telse {\n\t\t\ttype = coordGrammar.find(c => c == providedType);\n\t\t}\n\n\t\t// Check that each coord conforms to its grammar\n\t\tif (!type) {\n\t\t\t// Type does not exist in the grammar, throw\n\t\t\tlet coordName = coordMeta.name || id;\n\t\t\tthrow new TypeError(`${providedType ?? arg.raw} not allowed for ${coordName} in ${name}()`);\n\t\t}\n\n\t\tlet fromRange = type.range;\n\n\t\tif (providedType === \"<percentage>\") {\n\t\t\tfromRange ||= [0, 1];\n\t\t}\n\n\t\tlet toRange = coordMeta.range || coordMeta.refRange;\n\n\t\tif (fromRange && toRange) {\n\t\t\tcoords[i] = util.mapRange(fromRange, toRange, coords[i]);\n\t\t}\n\n\t\treturn type;\n\t});\n\n\treturn types;\n}\n\n\n/**\n * Convert a CSS Color string to a color object\n * @param {string} str\n * @param {object} [options]\n * @param {object} [options.meta] - Object for additional information about the parsing\n * @returns {Color}\n */\nexport default function parse (str, {meta} = {}) {\n\tlet env = {\"str\": String(str)?.trim()};\n\thooks.run(\"parse-start\", env);\n\n\tif (env.color) {\n\t\treturn env.color;\n\t}\n\n\tenv.parsed = util.parseFunction(env.str);\n\n\tif (env.parsed) {\n\t\t// Is a functional syntax\n\t\tlet name = env.parsed.name;\n\n\t\tif (name === \"color\") {\n\t\t\t// color() function\n\t\t\tlet id = env.parsed.args.shift();\n\t\t\t// Check against both <dashed-ident> and <ident> versions\n\t\t\tlet alternateId = id.startsWith(\"--\") ? id.substring(2) : `--${id}`;\n\t\t\tlet ids = [id, alternateId];\n\t\t\tlet alpha = env.parsed.rawArgs.indexOf(\"/\") > 0 ? env.parsed.args.pop() : 1;\n\n\t\t\tfor (let space of ColorSpace.all) {\n\t\t\t\tlet colorSpec = space.getFormat(\"color\");\n\n\t\t\t\tif (colorSpec) {\n\t\t\t\t\tif (ids.includes(colorSpec.id) || colorSpec.ids?.filter((specId) => ids.includes(specId)).length) {\n\t\t\t\t\t\t// From https://drafts.csswg.org/css-color-4/#color-function\n\t\t\t\t\t\t// If more <number>s or <percentage>s are provided than parameters that the colorspace takes, the excess <number>s at the end are ignored.\n\t\t\t\t\t\t// If less <number>s or <percentage>s are provided than parameters that the colorspace takes, the missing parameters default to 0. (This is particularly convenient for multichannel printers where the additional inks are spot colors or varnishes that most colors on the page won\u2019t use.)\n\t\t\t\t\t\tconst coords = Object.keys(space.coords).map((_, i) => env.parsed.args[i] || 0);\n\n\t\t\t\t\t\tlet types;\n\n\t\t\t\t\t\tif (colorSpec.coordGrammar) {\n\t\t\t\t\t\t\ttypes = coerceCoords(space, colorSpec, \"color\", coords);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (meta) {\n\t\t\t\t\t\t\tObject.assign(meta, {formatId: \"color\", types});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (colorSpec.id.startsWith(\"--\") && !id.startsWith(\"--\")) {\n\t\t\t\t\t\t\tdefaults.warn(`${space.name} is a non-standard space and not currently supported in the CSS spec. ` +\n\t\t\t\t\t\t\t              `Use prefixed color(${colorSpec.id}) instead of color(${id}).`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id.startsWith(\"--\") && !colorSpec.id.startsWith(\"--\")) {\n\t\t\t\t\t\t\tdefaults.warn(`${space.name} is a standard space and supported in the CSS spec. ` +\n\t\t\t\t\t\t\t              `Use color(${colorSpec.id}) instead of prefixed color(${id}).`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {spaceId: space.id, coords, alpha};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Not found\n\t\t\tlet didYouMean = \"\";\n\t\t\tlet registryId = id in ColorSpace.registry ? id : alternateId;\n\t\t\tif (registryId in ColorSpace.registry) {\n\t\t\t\t// Used color space id instead of color() id, these are often different\n\t\t\t\tlet cssId = ColorSpace.registry[registryId].formats?.color?.id;\n\n\t\t\t\tif (cssId) {\n\t\t\t\t\tdidYouMean = `Did you mean color(${cssId})?`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new TypeError(`Cannot parse color(${id}). ` + (didYouMean || \"Missing a plugin?\"));\n\t\t}\n\t\telse {\n\t\t\tfor (let space of ColorSpace.all) {\n\t\t\t\t// color space specific function\n\t\t\t\tlet format = space.getFormat(name);\n\t\t\t\tif (format && format.type === \"function\") {\n\t\t\t\t\tlet alpha = 1;\n\n\t\t\t\t\tif (format.lastAlpha || util.last(env.parsed.args).alpha) {\n\t\t\t\t\t\talpha = env.parsed.args.pop();\n\t\t\t\t\t}\n\n\t\t\t\t\tlet coords = env.parsed.args;\n\n\t\t\t\t\tlet types;\n\n\t\t\t\t\tif (format.coordGrammar) {\n\t\t\t\t\t\ttypes = coerceCoords(space, format, name, coords);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (meta) {\n\t\t\t\t\t\tObject.assign(meta, {formatId: format.name, types});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tspaceId: space.id,\n\t\t\t\t\t\tcoords, alpha,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// Custom, colorspace-specific format\n\t\tfor (let space of ColorSpace.all) {\n\t\t\tfor (let formatId in space.formats) {\n\t\t\t\tlet format = space.formats[formatId];\n\n\t\t\t\tif (format.type !== \"custom\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (format.test && !format.test(env.str)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet color = format.parse(env.str);\n\n\t\t\t\tif (color) {\n\t\t\t\t\tcolor.alpha ??= 1;\n\n\t\t\t\t\tif (meta) {\n\t\t\t\t\t\tmeta.formatId = formatId;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn color;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// If we're here, we couldn't parse\n\tthrow new TypeError(`Could not parse ${str} as a color. Missing a plugin?`);\n}\n", "import ColorSpace from \"./space.js\";\nimport {isString} from \"./util.js\";\nimport parse from \"./parse.js\";\n\n/**\n * Resolves a color reference (object or string) to a plain color object\n * @param {Color | {space, coords, alpha} | string | Array<Color | {space, coords, alpha} | string> } color\n * @returns {{space, coords, alpha} | Array<{space, coords, alpha}}>\n */\nexport default function getColor (color) {\n\tif (Array.isArray(color)) {\n\t\treturn color.map(getColor);\n\t}\n\n\tif (!color) {\n\t\tthrow new TypeError(\"Empty color reference\");\n\t}\n\n\tif (isString(color)) {\n\t\tcolor = parse(color);\n\t}\n\n\t// Object fixup\n\tlet space = color.space || color.spaceId;\n\n\tif (!(space instanceof ColorSpace)) {\n\t\t// Convert string id to color space object\n\t\tcolor.space = ColorSpace.get(space);\n\t}\n\n\tif (color.alpha === undefined) {\n\t\tcolor.alpha = 1;\n\t}\n\n\treturn color;\n}\n", "import {type, parseCoordGrammar, serializeNumber, mapRange} from \"./util.js\";\nimport {getWhite} from \"./adapt.js\";\nimport hooks from \"./hooks.js\";\nimport getColor from \"./getColor.js\";\n\nconst \u03B5 = .000075;\n\n/**\n * Class to represent a color space\n */\nexport default class ColorSpace {\n\tconstructor (options) {\n\t\tthis.id = options.id;\n\t\tthis.name = options.name;\n\t\tthis.base = options.base ? ColorSpace.get(options.base) : null;\n\t\tthis.aliases = options.aliases;\n\n\t\tif (this.base) {\n\t\t\tthis.fromBase = options.fromBase;\n\t\t\tthis.toBase = options.toBase;\n\t\t}\n\n\t\t// Coordinate metadata\n\n\t\tlet coords = options.coords ?? this.base.coords;\n\n\t\tfor (let name in coords) {\n\t\t\tif (!(\"name\" in coords[name])) {\n\t\t\t\tcoords[name].name = name;\n\t\t\t}\n\t\t}\n\t\tthis.coords = coords;\n\n\t\t// White point\n\n\t\tlet white = options.white ?? this.base.white ?? \"D65\";\n\t\tthis.white = getWhite(white);\n\n\t\t// Sort out formats\n\n\t\tthis.formats = options.formats ?? {};\n\n\t\tfor (let name in this.formats) {\n\t\t\tlet format = this.formats[name];\n\t\t\tformat.type ||= \"function\";\n\t\t\tformat.name ||= name;\n\t\t}\n\n\t\tif (!this.formats.color?.id) {\n\t\t\tthis.formats.color = {\n\t\t\t\t...this.formats.color ?? {},\n\t\t\t\tid: options.cssId || this.id,\n\t\t\t};\n\t\t}\n\n\t\t// Gamut space\n\n\t\tif (options.gamutSpace) {\n\t\t\t// Gamut space explicitly specified\n\t\t\tthis.gamutSpace = options.gamutSpace === \"self\" ? this : ColorSpace.get(options.gamutSpace);\n\t\t}\n\t\telse {\n\t\t\t// No gamut space specified, calculate a sensible default\n\t\t\tif (this.isPolar) {\n\t\t\t\t// Do not check gamut through polar coordinates\n\t\t\t\tthis.gamutSpace = this.base;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.gamutSpace =  this;\n\t\t\t}\n\t\t}\n\n\t\t// Optimize inGamut for unbounded spaces\n\t\tif (this.gamutSpace.isUnbounded) {\n\t\t\tthis.inGamut = (coords, options) => {\n\t\t\t\treturn true;\n\t\t\t};\n\t\t}\n\n\t\t// Other stuff\n\t\tthis.referred = options.referred;\n\n\t\t// Compute ancestors and store them, since they will never change\n\t\tObject.defineProperty(this, \"path\", {\n\t\t\tvalue: getPath(this).reverse(),\n\t\t\twritable: false,\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t});\n\n\t\thooks.run(\"colorspace-init-end\", this);\n\t}\n\n\tinGamut (coords, {epsilon = \u03B5} = {}) {\n\t\tif (!this.equals(this.gamutSpace)) {\n\t\t\tcoords = this.to(this.gamutSpace, coords);\n\t\t\treturn this.gamutSpace.inGamut(coords, {epsilon});\n\t\t}\n\n\t\tlet coordMeta = Object.values(this.coords);\n\n\t\treturn coords.every((c, i) => {\n\t\t\tlet meta = coordMeta[i];\n\n\t\t\tif (meta.type !== \"angle\" && meta.range) {\n\t\t\t\tif (Number.isNaN(c)) {\n\t\t\t\t\t// NaN is always in gamut\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tlet [min, max] = meta.range;\n\t\t\t\treturn (min === undefined || c >= min - epsilon)\n\t\t\t\t    && (max === undefined || c <= max + epsilon);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tget isUnbounded () {\n\t\treturn Object.values(this.coords).every(coord => !(\"range\" in coord));\n\t}\n\n\tget cssId () {\n\t\treturn this.formats?.color?.id || this.id;\n\t}\n\n\tget isPolar () {\n\t\tfor (let id in this.coords) {\n\t\t\tif (this.coords[id].type === \"angle\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetFormat (format) {\n\t\tif (typeof format === \"object\") {\n\t\t\tformat = processFormat(format, this);\n\t\t\treturn format;\n\t\t}\n\n\t\tlet ret;\n\t\tif (format === \"default\") {\n\t\t\t// Get first format\n\t\t\tret = Object.values(this.formats)[0];\n\t\t}\n\t\telse {\n\t\t\tret = this.formats[format];\n\t\t}\n\n\t\tif (ret) {\n\t\t\tret = processFormat(ret, this);\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Check if this color space is the same as another color space reference.\n\t * Allows proxying color space objects and comparing color spaces with ids.\n\t * @param {string | ColorSpace} space ColorSpace object or id to compare to\n\t * @returns {boolean}\n\t */\n\tequals (space) {\n\t\tif (!space) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === space || this.id === space || this.id === space.id;\n\t}\n\n\tto (space, coords) {\n\t\tif (arguments.length === 1) {\n\t\t\tconst color = getColor(space);\n\t\t\t[space, coords] = [color.space, color.coords];\n\t\t}\n\n\t\tspace = ColorSpace.get(space);\n\n\t\tif (this.equals(space)) {\n\t\t\t// Same space, no change needed\n\t\t\treturn coords;\n\t\t}\n\n\t\t// Convert NaN to 0, which seems to be valid in every coordinate of every color space\n\t\tcoords = coords.map(c => Number.isNaN(c) ? 0 : c);\n\n\t\t// Find connection space = lowest common ancestor in the base tree\n\t\tlet myPath = this.path;\n\t\tlet otherPath = space.path;\n\n\t\tlet connectionSpace, connectionSpaceIndex;\n\n\t\tfor (let i = 0; i < myPath.length; i++) {\n\t\t\tif (myPath[i].equals(otherPath[i])) {\n\t\t\t\tconnectionSpace = myPath[i];\n\t\t\t\tconnectionSpaceIndex = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!connectionSpace) {\n\t\t\t// This should never happen\n\t\t\tthrow new Error(`Cannot convert between color spaces ${this} and ${space}: no connection space was found`);\n\t\t}\n\n\t\t// Go up from current space to connection space\n\t\tfor (let i = myPath.length - 1; i > connectionSpaceIndex; i--) {\n\t\t\tcoords = myPath[i].toBase(coords);\n\t\t}\n\n\t\t// Go down from connection space to target space\n\t\tfor (let i = connectionSpaceIndex + 1; i < otherPath.length; i++) {\n\t\t\tcoords = otherPath[i].fromBase(coords);\n\t\t}\n\n\t\treturn coords;\n\t}\n\n\tfrom (space, coords) {\n\t\tif (arguments.length === 1) {\n\t\t\tconst color = getColor(space);\n\t\t\t[space, coords] = [color.space, color.coords];\n\t\t}\n\n\t\tspace = ColorSpace.get(space);\n\n\t\treturn space.to(this, coords);\n\t}\n\n\ttoString () {\n\t\treturn `${this.name} (${this.id})`;\n\t}\n\n\tgetMinCoords () {\n\t\tlet ret = [];\n\n\t\tfor (let id in this.coords) {\n\t\t\tlet meta = this.coords[id];\n\t\t\tlet range = meta.range || meta.refRange;\n\t\t\tret.push(range?.min ?? 0);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tstatic registry = {};\n\n\t// Returns array of unique color spaces\n\tstatic get all () {\n\t\treturn [...new Set(Object.values(ColorSpace.registry))];\n\t}\n\n\tstatic register (id, space) {\n\t\tif (arguments.length === 1) {\n\t\t\tspace = arguments[0];\n\t\t\tid = space.id;\n\t\t}\n\n\t\tspace = this.get(space);\n\n\t\tif (this.registry[id] && this.registry[id] !== space) {\n\t\t\tthrow new Error(`Duplicate color space registration: '${id}'`);\n\t\t}\n\t\tthis.registry[id] = space;\n\n\t\t// Register aliases when called without an explicit ID.\n\t\tif (arguments.length === 1 && space.aliases) {\n\t\t\tfor (let alias of space.aliases) {\n\t\t\t\tthis.register(alias, space);\n\t\t\t}\n\t\t}\n\n\t\treturn space;\n\t}\n\n\t/**\n\t * Lookup ColorSpace object by name\n\t * @param {ColorSpace | string} name\n\t */\n\tstatic get (space, ...alternatives) {\n\t\tif (!space || space instanceof ColorSpace) {\n\t\t\treturn space;\n\t\t}\n\n\t\tlet argType = type(space);\n\n\t\tif (argType === \"string\") {\n\t\t\t// It's a color space id\n\t\t\tlet ret = ColorSpace.registry[space.toLowerCase()];\n\n\t\t\tif (!ret) {\n\t\t\t\tthrow new TypeError(`No color space found with id = \"${space}\"`);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (alternatives.length) {\n\t\t\treturn ColorSpace.get(...alternatives);\n\t\t}\n\n\t\tthrow new TypeError(`${space} is not a valid color space`);\n\t}\n\n\t/**\n\t * Get metadata about a coordinate of a color space\n\t *\n\t * @static\n\t * @param {Array | string} ref\n\t * @param {ColorSpace | string} [workingSpace]\n\t * @return {Object}\n\t */\n\tstatic resolveCoord (ref, workingSpace) {\n\t\tlet coordType = type(ref);\n\t\tlet space, coord;\n\n\t\tif (coordType === \"string\") {\n\t\t\tif (ref.includes(\".\")) {\n\t\t\t\t// Absolute coordinate\n\t\t\t\t[space, coord] = ref.split(\".\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Relative coordinate\n\t\t\t\t[space, coord] = [, ref];\n\t\t\t}\n\t\t}\n\t\telse if (Array.isArray(ref)) {\n\t\t\t[space, coord] = ref;\n\t\t}\n\t\telse {\n\t\t\t// Object\n\t\t\tspace = ref.space;\n\t\t\tcoord = ref.coordId;\n\t\t}\n\n\t\tspace = ColorSpace.get(space);\n\n\t\tif (!space) {\n\t\t\tspace = workingSpace;\n\t\t}\n\n\t\tif (!space) {\n\t\t\tthrow new TypeError(`Cannot resolve coordinate reference ${ref}: No color space specified and relative references are not allowed here`);\n\t\t}\n\n\t\tcoordType = type(coord);\n\n\t\tif (coordType === \"number\" || coordType === \"string\" && coord >= 0) {\n\t\t\t// Resolve numerical coord\n\t\t\tlet meta = Object.entries(space.coords)[coord];\n\n\t\t\tif (meta) {\n\t\t\t\treturn {space, id: meta[0], index: coord, ...meta[1]};\n\t\t\t}\n\t\t}\n\n\t\tspace = ColorSpace.get(space);\n\n\t\tlet normalizedCoord = coord.toLowerCase();\n\n\t\tlet i = 0;\n\t\tfor (let id in space.coords) {\n\t\t\tlet meta = space.coords[id];\n\n\t\t\tif (id.toLowerCase() === normalizedCoord || meta.name?.toLowerCase() === normalizedCoord) {\n\t\t\t\treturn {space, id, index: i, ...meta};\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\tthrow new TypeError(`No \"${coord}\" coordinate found in ${space.name}. Its coordinates are: ${Object.keys(space.coords).join(\", \")}`);\n\t}\n\n\tstatic DEFAULT_FORMAT = {\n\t\ttype: \"functions\",\n\t\tname: \"color\",\n\t};\n}\n\nfunction getPath (space) {\n\tlet ret = [space];\n\n\tfor (let s = space; s = s.base;) {\n\t\tret.push(s);\n\t}\n\n\treturn ret;\n}\n\nfunction processFormat (format, {coords} = {}) {\n\tif (format.coords && !format.coordGrammar) {\n\t\tformat.type ||= \"function\";\n\t\tformat.name ||= \"color\";\n\n\t\t// Format has not been processed\n\t\tformat.coordGrammar = parseCoordGrammar(format.coords);\n\n\t\tlet coordFormats = Object.entries(coords).map(([id, coordMeta], i) => {\n\t\t\t// Preferred format for each coord is the first one\n\t\t\tlet outputType = format.coordGrammar[i][0];\n\n\t\t\tlet fromRange = coordMeta.range || coordMeta.refRange;\n\t\t\tlet toRange = outputType.range, suffix = \"\";\n\n\t\t\t// Non-strict equals intentional since outputType could be a string object\n\t\t\tif (outputType == \"<percentage>\") {\n\t\t\t\ttoRange = [0, 100];\n\t\t\t\tsuffix = \"%\";\n\t\t\t}\n\t\t\telse if (outputType == \"<angle>\") {\n\t\t\t\tsuffix = \"deg\";\n\t\t\t}\n\n\t\t\treturn  {fromRange, toRange, suffix};\n\t\t});\n\n\t\tformat.serializeCoords = (coords, precision) => {\n\t\t\treturn coords.map((c, i) => {\n\t\t\t\tlet {fromRange, toRange, suffix} = coordFormats[i];\n\n\t\t\t\tif (fromRange && toRange) {\n\t\t\t\t\tc = mapRange(fromRange, toRange, c);\n\t\t\t\t}\n\n\t\t\t\tc = serializeNumber(c, {precision, unit: suffix});\n\n\t\t\t\treturn c;\n\t\t\t});\n\t\t};\n\t}\n\n\treturn format;\n}\n", "import ColorSpace from \"../space.js\";\n\nexport default new ColorSpace({\n\tid: \"xyz-d65\",\n\tname: \"XYZ D65\",\n\tcoords: {\n\t\tx: {name: \"X\"},\n\t\ty: {name: \"Y\"},\n\t\tz: {name: \"Z\"},\n\t},\n\twhite: \"D65\",\n\tformats: {\n\t\tcolor: {\n\t\t\tids: [\"xyz-d65\", \"xyz\"],\n\t\t},\n\t},\n\taliases: [\"xyz\"],\n});\n", "import ColorSpace from \"./space.js\";\nimport {multiplyMatrices} from \"./util.js\";\nimport adapt from \"./adapt.js\";\nimport XYZ_D65 from \"./spaces/xyz-d65.js\";\n\n/**\n * Convenience class for RGB color spaces\n * @extends {ColorSpace}\n */\nexport default class RGBColorSpace extends ColorSpace {\n\t/**\n\t * Creates a new RGB ColorSpace.\n\t * If coords are not specified, they will use the default RGB coords.\n\t * Instead of `fromBase()` and `toBase()` functions,\n\t * you can specify to/from XYZ matrices and have `toBase()` and `fromBase()` automatically generated.\n\t * @param {*} options - Same options as {@link ColorSpace} plus:\n\t * @param {number[][]} options.toXYZ_M - Matrix to convert to XYZ\n\t * @param {number[][]} options.fromXYZ_M - Matrix to convert from XYZ\n\t */\n\tconstructor (options) {\n\t\tif (!options.coords) {\n\t\t\toptions.coords = {\n\t\t\t\tr: {\n\t\t\t\t\trange: [0, 1],\n\t\t\t\t\tname: \"Red\",\n\t\t\t\t},\n\t\t\t\tg: {\n\t\t\t\t\trange: [0, 1],\n\t\t\t\t\tname: \"Green\",\n\t\t\t\t},\n\t\t\t\tb: {\n\t\t\t\t\trange: [0, 1],\n\t\t\t\t\tname: \"Blue\",\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (!options.base) {\n\t\t\toptions.base = XYZ_D65;\n\t\t}\n\n\t\tif (options.toXYZ_M && options.fromXYZ_M) {\n\t\t\toptions.toBase ??= rgb => {\n\t\t\t\tlet xyz = multiplyMatrices(options.toXYZ_M, rgb);\n\n\t\t\t\tif (this.white !== this.base.white) {\n\t\t\t\t\t// Perform chromatic adaptation\n\t\t\t\t\txyz = adapt(this.white, this.base.white, xyz);\n\t\t\t\t}\n\n\t\t\t\treturn xyz;\n\t\t\t};\n\n\t\t\toptions.fromBase ??= xyz => {\n\t\t\t\txyz = adapt(this.base.white, this.white, xyz);\n\t\t\t\treturn multiplyMatrices(options.fromXYZ_M, xyz);\n\t\t\t};\n\t\t}\n\n\t\toptions.referred ??= \"display\";\n\n\t\tsuper(options);\n\t}\n}\n", "import ColorSpace from \"./space.js\";\nimport getColor from \"./getColor.js\";\n\n/**\n * Get the coordinates of a color in any color space\n * @param {Color} color\n * @param {string | ColorSpace} [space = color.space] The color space to convert to. Defaults to the color's current space\n * @returns {number[]} The color coordinates in the given color space\n */\nexport default function getAll (color, space) {\n\tcolor = getColor(color);\n\n\tif (!space || color.space.equals(space)) {\n\t\t// No conversion needed\n\t\treturn color.coords.slice();\n\t}\n\n\tspace = ColorSpace.get(space);\n\treturn space.from(color);\n}\n", "import ColorSpace from \"./space.js\";\nimport getAll from \"./getAll.js\";\nimport getColor from \"./getColor.js\";\n\nexport default function get (color, prop) {\n\tcolor = getColor(color);\n\n\tlet {space, index} = ColorSpace.resolveCoord(prop, color.space);\n\tlet coords = getAll(color, space);\n\treturn coords[index];\n}\n", "import ColorSpace from \"./space.js\";\nimport getColor from \"./getColor.js\";\n\nexport default function setAll (color, space, coords) {\n\tcolor = getColor(color);\n\n\tspace = ColorSpace.get(space);\n\tcolor.coords = space.to(color.space, coords);\n\treturn color;\n}\n\nsetAll.returns = \"color\";\n", "import ColorSpace from \"./space.js\";\nimport getColor from \"./getColor.js\";\nimport get from \"./get.js\";\nimport getAll from \"./getAll.js\";\nimport setAll from \"./setAll.js\";\nimport {type} from \"./util.js\";\n\n// Set properties and return current instance\nexport default function set (color, prop, value) {\n\tcolor = getColor(color);\n\n\tif (arguments.length === 2 && type(arguments[1]) === \"object\") {\n\t\t// Argument is an object literal\n\t\tlet object = arguments[1];\n\t\tfor (let p in object) {\n\t\t\tset(color, p, object[p]);\n\t\t}\n\t}\n\telse {\n\t\tif (typeof value === \"function\") {\n\t\t\tvalue = value(get(color, prop));\n\t\t}\n\n\t\tlet {space, index} = ColorSpace.resolveCoord(prop, color.space);\n\t\tlet coords = getAll(color, space);\n\t\tcoords[index] = value;\n\t\tsetAll(color, space, coords);\n\t}\n\n\treturn color;\n}\n\nset.returns = \"color\";\n", "import ColorSpace from \"../space.js\";\nimport adapt from \"../adapt.js\";\nimport XYZ_D65 from \"./xyz-d65.js\";\n\nexport default new ColorSpace({\n\tid: \"xyz-d50\",\n\tname: \"XYZ D50\",\n\twhite: \"D50\",\n\tbase: XYZ_D65,\n\tfromBase: coords => adapt(XYZ_D65.white, \"D50\", coords),\n\ttoBase: coords => adapt(\"D50\", XYZ_D65.white, coords),\n});\n", "import ColorSpace from \"../space.js\";\nimport {WHITES} from \"../adapt.js\";\nimport xyz_d50 from \"./xyz-d50.js\";\n\n// \u03BA * \u03B5  = 2^3 = 8\nconst \u03B5 = 216 / 24389;  // 6^3/29^3 == (24/116)^3\nconst \u03B53 = 24 / 116;\nconst \u03BA = 24389 / 27;   // 29^3/3^3\n\nlet white = WHITES.D50;\n\nexport default new ColorSpace({\n\tid: \"lab\",\n\tname: \"Lab\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\ta: {\n\t\t\trefRange: [-125, 125],\n\t\t},\n\t\tb: {\n\t\t\trefRange: [-125, 125],\n\t\t},\n\t},\n\n\t// Assuming XYZ is relative to D50, convert to CIE Lab\n\t// from CIE standard, which now defines these as a rational fraction\n\twhite,\n\n\tbase: xyz_d50,\n\t// Convert D50-adapted XYX to Lab\n\t//  CIE 15.3:2004 section 8.2.1.1\n\tfromBase (XYZ) {\n\t\t// compute xyz, which is XYZ scaled relative to reference white\n\t\tlet xyz = XYZ.map((value, i) => value / white[i]);\n\n\t\t// now compute f\n\t\tlet f = xyz.map(value => value > \u03B5 ? Math.cbrt(value) : (\u03BA * value + 16) / 116);\n\n\t\treturn [\n\t\t\t(116 * f[1]) - 16,   // L\n\t\t\t500 * (f[0] - f[1]), // a\n\t\t\t200 * (f[1] - f[2]),  // b\n\t\t];\n\t},\n\t// Convert Lab to D50-adapted XYZ\n\t// Same result as CIE 15.3:2004 Appendix D although the derivation is different\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\ttoBase (Lab) {\n\t\t// compute f, starting with the luminance-related term\n\t\tlet f = [];\n\t\tf[1] = (Lab[0] + 16) / 116;\n\t\tf[0] = Lab[1] / 500 + f[1];\n\t\tf[2] = f[1] - Lab[2] / 200;\n\n\t\t// compute xyz\n\t\tlet xyz = [\n\t\t\tf[0]   > \u03B53 ? Math.pow(f[0], 3)                : (116 * f[0] - 16) / \u03BA,\n\t\t\tLab[0] > 8  ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / \u03BA,\n\t\t\tf[2]   > \u03B53 ? Math.pow(f[2], 3)                : (116 * f[2] - 16) / \u03BA,\n\t\t];\n\n\t\t// Compute XYZ by scaling xyz by reference white\n\t\treturn xyz.map((value, i) => value * white[i]);\n\t},\n\n\tformats: {\n\t\t\"lab\": {\n\t\t\tcoords: [\"<number> | <percentage>\", \"<number> | <percentage>[-1,1]\", \"<number> | <percentage>[-1,1]\"],\n\t\t},\n\t},\n});\n", "export function constrain (angle) {\n\treturn ((angle % 360) + 360) % 360;\n}\n\nexport function adjust (arc, angles) {\n\tif (arc === \"raw\") {\n\t\treturn angles;\n\t}\n\n\tlet [a1, a2] = angles.map(constrain);\n\n\tlet angleDiff = a2 - a1;\n\n\tif (arc === \"increasing\") {\n\t\tif (angleDiff < 0) {\n\t\t\ta2 += 360;\n\t\t}\n\t}\n\telse if (arc === \"decreasing\") {\n\t\tif (angleDiff > 0) {\n\t\t\ta1 += 360;\n\t\t}\n\t}\n\telse if (arc === \"longer\") {\n\t\tif (-180 < angleDiff && angleDiff < 180) {\n\t\t\tif (angleDiff > 0) {\n\t\t\t\ta1 += 360;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ta2 += 360;\n\t\t\t}\n\t\t}\n\t}\n\telse if (arc === \"shorter\") {\n\t\tif (angleDiff > 180) {\n\t\t\ta1 += 360;\n\t\t}\n\t\telse if (angleDiff < -180) {\n\t\t\ta2 += 360;\n\t\t}\n\t}\n\n\treturn [a1, a2];\n}\n", "import ColorSpace from \"../space.js\";\nimport Lab from \"./lab.js\";\nimport {constrain as constrainAngle} from \"../angles.js\";\n\nexport default new ColorSpace({\n\tid: \"lch\",\n\tname: \"LCH\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\tc: {\n\t\t\trefRange: [0, 150],\n\t\t\tname: \"Chroma\",\n\t\t},\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\n\tbase: Lab,\n\tfromBase (Lab) {\n\t\t// Convert to polar form\n\t\tlet [L, a, b] = Lab;\n\t\tlet hue;\n\t\tconst \u03B5 = 0.02;\n\n\t\tif (Math.abs(a) < \u03B5 && Math.abs(b) < \u03B5) {\n\t\t\thue = NaN;\n\t\t}\n\t\telse {\n\t\t\thue = Math.atan2(b, a) * 180 / Math.PI;\n\t\t}\n\n\t\treturn [\n\t\t\tL, // L is still L\n\t\t\tMath.sqrt(a ** 2 + b ** 2), // Chroma\n\t\t\tconstrainAngle(hue), // Hue, in degrees [0 to 360)\n\t\t];\n\t},\n\ttoBase (LCH) {\n\t\t// Convert from polar form\n\t\tlet [Lightness, Chroma, Hue] = LCH;\n\t\t// Clamp any negative Chroma\n\t\tif (Chroma < 0) {\n\t\t\tChroma = 0;\n\t\t}\n\t\t// Deal with NaN Hue\n\t\tif (isNaN(Hue)) {\n\t\t\tHue = 0;\n\t\t}\n\t\treturn [\n\t\t\tLightness, // L is still L\n\t\t\tChroma * Math.cos(Hue * Math.PI / 180), // a\n\t\t\tChroma * Math.sin(Hue * Math.PI / 180),  // b\n\t\t];\n\t},\n\n\tformats: {\n\t\t\"lch\": {\n\t\t\tcoords: [\"<number> | <percentage>\", \"<number> | <percentage>\", \"<number> | <angle>\"],\n\t\t},\n\t},\n});\n", "import defaults from \"../defaults.js\";\nimport lab from \"../spaces/lab.js\";\nimport lch from \"../spaces/lch.js\";\nimport getColor from \"../getColor.js\";\n\n// deltaE2000 is a statistically significant improvement\n// and is recommended by the CIE and Idealliance\n// especially for color differences less than 10 deltaE76\n// but is wicked complicated\n// and many implementations have small errors!\n// DeltaE2000 is also discontinuous; in case this\n// matters to you, use deltaECMC instead.\n\nconst Gfactor = 25 ** 7;\nconst \u03C0 = Math.PI;\nconst r2d = 180 / \u03C0;\nconst d2r = \u03C0 / 180;\n\nfunction pow7 (x) {\n\t// Faster than x ** 7 or Math.pow(x, 7)\n\n\tconst x2 = x * x;\n\tconst x7 = x2 * x2 * x2 * x;\n\n\treturn x7;\n}\n\nexport default function (color, sample, {kL = 1, kC = 1, kH = 1} = {}) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and the function parameter as the sample,\n\t// calculate deltaE 2000.\n\n\t// This implementation assumes the parametric\n\t// weighting factors kL, kC and kH\n\t// for the influence of viewing conditions\n\t// are all 1, as sadly seems typical.\n\t// kL should be increased for lightness texture or noise\n\t// and kC increased for chroma noise\n\n\tlet [L1, a1, b1] = lab.from(color);\n\tlet C1 = lch.from(lab, [L1, a1, b1])[1];\n\tlet [L2, a2, b2] = lab.from(sample);\n\tlet C2 = lch.from(lab, [L2, a2, b2])[1];\n\n\t// Check for negative Chroma,\n\t// which might happen through\n\t// direct user input of LCH values\n\n\tif (C1 < 0) {\n\t\tC1 = 0;\n\t}\n\tif (C2 < 0) {\n\t\tC2 = 0;\n\t}\n\n\tlet Cbar = (C1 + C2) / 2; // mean Chroma\n\n\t// calculate a-axis asymmetry factor from mean Chroma\n\t// this turns JND ellipses for near-neutral colors back into circles\n\tlet C7 = pow7(Cbar);\n\n\tlet G = 0.5 * (1 - Math.sqrt(C7 / (C7 + Gfactor)));\n\n\t// scale a axes by asymmetry factor\n\t// this by the way is why there is no Lab2000 colorspace\n\tlet adash1 = (1 + G) * a1;\n\tlet adash2 = (1 + G) * a2;\n\n\t// calculate new Chroma from scaled a and original b axes\n\tlet Cdash1 = Math.sqrt(adash1 ** 2 + b1 ** 2);\n\tlet Cdash2 = Math.sqrt(adash2 ** 2 + b2 ** 2);\n\n\t// calculate new hues, with zero hue for true neutrals\n\t// and in degrees, not radians\n\n\tlet h1 = (adash1 === 0 && b1 === 0) ? 0 : Math.atan2(b1, adash1);\n\tlet h2 = (adash2 === 0 && b2 === 0) ? 0 : Math.atan2(b2, adash2);\n\n\tif (h1 < 0) {\n\t\th1 += 2 * \u03C0;\n\t}\n\tif (h2 < 0) {\n\t\th2 += 2 * \u03C0;\n\t}\n\n\th1 *= r2d;\n\th2 *= r2d;\n\n\t// Lightness and Chroma differences; sign matters\n\tlet \u0394L = L2 - L1;\n\tlet \u0394C = Cdash2 - Cdash1;\n\n\t// Hue difference, getting the sign correct\n\tlet hdiff = h2 - h1;\n\tlet hsum = h1 + h2;\n\tlet habs = Math.abs(hdiff);\n\tlet \u0394h;\n\n\tif (Cdash1 * Cdash2 === 0) {\n\t\t\u0394h = 0;\n\t}\n\telse if (habs <= 180) {\n\t\t\u0394h = hdiff;\n\t}\n\telse if (hdiff > 180) {\n\t\t\u0394h = hdiff - 360;\n\t}\n\telse if (hdiff < -180) {\n\t\t\u0394h = hdiff + 360;\n\t}\n\telse {\n\t\tdefaults.warn(\"the unthinkable has happened\");\n\t}\n\n\t// weighted Hue difference, more for larger Chroma\n\tlet \u0394H = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(\u0394h * d2r / 2);\n\n\t// calculate mean Lightness and Chroma\n\tlet Ldash = (L1 + L2) / 2;\n\tlet Cdash = (Cdash1 + Cdash2) / 2;\n\tlet Cdash7 = pow7(Cdash);\n\n\t// Compensate for non-linearity in the blue region of Lab.\n\t// Four possibilities for hue weighting factor,\n\t// depending on the angles, to get the correct sign\n\tlet hdash;\n\tif (Cdash1 * Cdash2 === 0) {\n\t\thdash = hsum;   // which should be zero\n\t}\n\telse if (habs <= 180) {\n\t\thdash = hsum / 2;\n\t}\n\telse if (hsum < 360) {\n\t\thdash = (hsum + 360) / 2;\n\t}\n\telse {\n\t\thdash = (hsum - 360) / 2;\n\t}\n\n\t// positional corrections to the lack of uniformity of CIELAB\n\t// These are all trying to make JND ellipsoids more like spheres\n\n\t// SL Lightness crispening factor\n\t// a background with L=50 is assumed\n\tlet lsq = (Ldash - 50) ** 2;\n\tlet SL = 1 + ((0.015 * lsq) / Math.sqrt(20 + lsq));\n\n\t// SC Chroma factor, similar to those in CMC and deltaE 94 formulae\n\tlet SC = 1 + 0.045 * Cdash;\n\n\t// Cross term T for blue non-linearity\n\tlet T = 1;\n\tT -= (0.17 * Math.cos((     hdash - 30)  * d2r));\n\tT += (0.24 * Math.cos(  2 * hdash        * d2r));\n\tT += (0.32 * Math.cos(((3 * hdash) + 6)  * d2r));\n\tT -= (0.20 * Math.cos(((4 * hdash) - 63) * d2r));\n\n\t// SH Hue factor depends on Chroma,\n\t// as well as adjusted hue angle like deltaE94.\n\tlet SH = 1 + 0.015 * Cdash * T;\n\n\t// RT Hue rotation term compensates for rotation of JND ellipses\n\t// and Munsell constant hue lines\n\t// in the medium-high Chroma blue region\n\t// (Hue 225 to 315)\n\tlet \u0394\u03B8 = 30 * Math.exp(-1 * (((hdash - 275) / 25) ** 2));\n\tlet RC = 2 * Math.sqrt(Cdash7 / (Cdash7 + Gfactor));\n\tlet RT = -1 * Math.sin(2 * \u0394\u03B8 * d2r) * RC;\n\n\t// Finally calculate the deltaE, term by term as root sume of squares\n\tlet dE = (\u0394L / (kL * SL)) ** 2;\n\tdE += (\u0394C / (kC * SC)) ** 2;\n\tdE += (\u0394H / (kH * SH)) ** 2;\n\tdE += RT * (\u0394C / (kC * SC)) * (\u0394H / (kH * SH));\n\treturn Math.sqrt(dE);\n\t// Yay!!!\n}\n", "import ColorSpace from \"../space.js\";\nimport {multiplyMatrices} from \"../util.js\";\nimport XYZ_D65 from \"./xyz-d65.js\";\n\n// Recalculated for consistent reference white\n// see https://github.com/w3c/csswg-drafts/issues/6642#issuecomment-943521484\nconst XYZtoLMS_M = [\n\t[ 0.8190224379967030, 0.3619062600528904, -0.1288737815209879 ],\n\t[ 0.0329836539323885, 0.9292868615863434,  0.0361446663506424 ],\n\t[ 0.0481771893596242, 0.2642395317527308,  0.6335478284694309 ],\n];\n// inverse of XYZtoLMS_M\nconst LMStoXYZ_M = [\n\t[  1.2268798758459243, -0.5578149944602171,  0.2813910456659647 ],\n\t[ -0.0405757452148008,  1.1122868032803170, -0.0717110580655164 ],\n\t[ -0.0763729366746601, -0.4214933324022432,  1.5869240198367816 ],\n];\nconst LMStoLab_M = [\n\t[ 0.2104542683093140,  0.7936177747023054, -0.0040720430116193 ],\n\t[ 1.9779985324311684, -2.4285922420485799,  0.4505937096174110 ],\n\t[ 0.0259040424655478,  0.7827717124575296, -0.8086757549230774 ],\n];\n// LMStoIab_M inverted\nconst LabtoLMS_M = [\n\t[ 1.0000000000000000,  0.3963377773761749,  0.2158037573099136 ],\n\t[ 1.0000000000000000, -0.1055613458156586, -0.0638541728258133 ],\n\t[ 1.0000000000000000, -0.0894841775298119, -1.2914855480194092 ],\n];\n\nexport default new ColorSpace({\n\tid: \"oklab\",\n\tname: \"Oklab\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\ta: {\n\t\t\trefRange: [-0.4, 0.4],\n\t\t},\n\t\tb: {\n\t\t\trefRange: [-0.4, 0.4],\n\t\t},\n\t},\n\n\t// Note that XYZ is relative to D65\n\twhite: \"D65\",\n\tbase: XYZ_D65,\n\tfromBase (XYZ) {\n\t\t// move to LMS cone domain\n\t\tlet LMS = multiplyMatrices(XYZtoLMS_M, XYZ);\n\n\t\t// non-linearity\n\t\tlet LMSg = LMS.map(val => Math.cbrt(val));\n\n\t\treturn multiplyMatrices(LMStoLab_M, LMSg);\n\n\t},\n\ttoBase (OKLab) {\n\t\t// move to LMS cone domain\n\t\tlet LMSg = multiplyMatrices(LabtoLMS_M, OKLab);\n\n\t\t// restore linearity\n\t\tlet LMS = LMSg.map(val => val ** 3);\n\n\t\treturn multiplyMatrices(LMStoXYZ_M, LMS);\n\t},\n\n\tformats: {\n\t\t\"oklab\": {\n\t\t\tcoords: [\"<percentage> | <number>\", \"<number> | <percentage>[-1,1]\", \"<number> | <percentage>[-1,1]\"],\n\t\t},\n\t},\n});\n", "// More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in CIE Lab\n\nimport oklab from \"../spaces/oklab.js\";\nimport getColor from \"../getColor.js\";\n\nexport default function (color, sample) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and a sample,\n\t// calculate deltaEOK, term by term as root sum of squares\n\tlet [L1, a1, b1] = oklab.from(color);\n\tlet [L2, a2, b2] = oklab.from(sample);\n\tlet \u0394L = L1 - L2;\n\tlet \u0394a = a1 - a2;\n\tlet \u0394b = b1 - b2;\n\treturn Math.sqrt(\u0394L ** 2 + \u0394a ** 2 + \u0394b ** 2);\n}\n", "import ColorSpace from \"./space.js\";\nimport getColor from \"./getColor.js\";\n\nconst \u03B5 = .000075;\n\n/**\n * Check if a color is in gamut of either its own or another color space\n * @return {Boolean} Is the color in gamut?\n */\nexport default function inGamut (color, space, {epsilon = \u03B5} = {}) {\n\tcolor = getColor(color);\n\n\tif (!space) {\n\t\tspace = color.space;\n\t}\n\n\tspace = ColorSpace.get(space);\n\tlet coords = color.coords;\n\n\tif (space !== color.space) {\n\t\tcoords = space.from(color);\n\t}\n\n\treturn space.inGamut(coords, {epsilon});\n}\n", "export default function clone (color) {\n\treturn {\n\t\tspace: color.space,\n\t\tcoords: color.coords.slice(),\n\t\talpha: color.alpha,\n\t};\n}\n", "import ColorSpace from \"./space.js\";\n\n/**\n * Euclidean distance of colors in an arbitrary color space\n */\nexport default function distance (color1, color2, space = \"lab\") {\n\tspace = ColorSpace.get(space);\n\n\t// Assume getColor() is called on color in space.from()\n\tlet coords1 = space.from(color1);\n\tlet coords2 = space.from(color2);\n\n\treturn Math.sqrt(coords1.reduce((acc, c1, i) => {\n\t\tlet c2 = coords2[i];\n\t\tif (isNaN(c1) || isNaN(c2)) {\n\t\t\treturn acc;\n\t\t}\n\n\t\treturn acc + (c2 - c1) ** 2;\n\t}, 0));\n}\n", "import distance from \"../distance.js\";\nimport getColor from \"../getColor.js\";\n\nexport default function deltaE76 (color, sample) {\n\t// Assume getColor() is called in the distance function\n\treturn distance(color, sample, \"lab\");\n}\n", "import lab from \"../spaces/lab.js\";\nimport lch from \"../spaces/lch.js\";\nimport getColor from \"../getColor.js\";\n\n// More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in Lab\n\n// CMC by the Color Measurement Committee of the\n// Bradford Society of Dyeists and Colorsts, 1994.\n// Uses LCH rather than Lab,\n// with different weights for L, C and H differences\n// A nice increase in accuracy for modest increase in complexity\nconst \u03C0 = Math.PI;\nconst d2r = \u03C0 / 180;\n\nexport default function (color, sample, {l = 2, c = 1} = {}) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and a sample,\n\t// calculate deltaE CMC.\n\n\t// This implementation assumes the parametric\n\t// weighting factors l:c are 2:1\n\t// which is typical for non-textile uses.\n\n\tlet [L1, a1, b1] = lab.from(color);\n\tlet [, C1, H1] = lch.from(lab, [L1, a1, b1]);\n\tlet [L2, a2, b2] = lab.from(sample);\n\tlet C2 = lch.from(lab, [L2, a2, b2])[1];\n\n\t// let [L1, a1, b1] = color.getAll(lab);\n\t// let C1 = color.get(\"lch.c\");\n\t// let H1 = color.get(\"lch.h\");\n\t// let [L2, a2, b2] = sample.getAll(lab);\n\t// let C2 = sample.get(\"lch.c\");\n\n\t// Check for negative Chroma,\n\t// which might happen through\n\t// direct user input of LCH values\n\n\tif (C1 < 0) {\n\t\tC1 = 0;\n\t}\n\tif (C2 < 0) {\n\t\tC2 = 0;\n\t}\n\n\t// we don't need H2 as \u0394H is calculated from \u0394a, \u0394b and \u0394C\n\n\t// Lightness and Chroma differences\n\t// These are (color - sample), unlike deltaE2000\n\tlet \u0394L = L1 - L2;\n\tlet \u0394C = C1 - C2;\n\n\tlet \u0394a = a1 - a2;\n\tlet \u0394b = b1 - b2;\n\n\t// weighted Hue difference, less for larger Chroma difference\n\n\tlet H2 = (\u0394a ** 2) + (\u0394b ** 2) - (\u0394C ** 2);\n\t// due to roundoff error it is possible that, for zero a and b,\n\t// \u0394C > \u0394a + \u0394b is 0, resulting in attempting\n\t// to take the square root of a negative number\n\n\t// trying instead the equation from Industrial Color Physics\n\t// By Georg A. Klein\n\n\t// let \u0394H = ((a1 * b2) - (a2 * b1)) / Math.sqrt(0.5 * ((C2 * C1) + (a2 * a1) + (b2 * b1)));\n\t// console.log({\u0394H});\n\t// This gives the same result to 12 decimal places\n\t// except it sometimes NaNs when trying to root a negative number\n\n\t// let \u0394H = Math.sqrt(H2); we never actually use the root, it gets squared again!!\n\n\t// positional corrections to the lack of uniformity of CIELAB\n\t// These are all trying to make JND ellipsoids more like spheres\n\n\t// SL Lightness crispening factor, depends entirely on L1 not L2\n\tlet SL = 0.511;\t// linear portion of the Y to L transfer function\n\tif (L1 >= 16) {\t// cubic portion\n\t\tSL = (0.040975 * L1) / (1 + 0.01765 * L1);\n\t}\n\n\t// SC Chroma factor\n\tlet SC = ((0.0638 * C1) / (1 + 0.0131 * C1)) + 0.638;\n\n\t// Cross term T for blue non-linearity\n\tlet T;\n\tif (Number.isNaN(H1)) {\n\t\tH1 = 0;\n\t}\n\n\tif (H1 >= 164 && H1 <= 345) {\n\t\tT = 0.56 + Math.abs(0.2 * Math.cos((H1 + 168) * d2r));\n\t}\n\telse {\n\t\tT = 0.36 + Math.abs(0.4 * Math.cos((H1 + 35) * d2r));\n\t}\n\t// console.log({T});\n\n\t// SH Hue factor also depends on C1,\n\tlet C4 = Math.pow(C1, 4);\n\tlet F = Math.sqrt(C4 / (C4 + 1900));\n\tlet SH = SC * ((F * T) + 1 - F);\n\n\t// Finally calculate the deltaE, term by term as root sume of squares\n\tlet dE = (\u0394L / (l * SL)) ** 2;\n\tdE += (\u0394C / (c * SC)) ** 2;\n\tdE += (H2 / (SH ** 2));\n\t// dE += (\u0394H / SH)  ** 2;\n\treturn Math.sqrt(dE);\n\t// Yay!!!\n}\n", "import ColorSpace from \"../space.js\";\nimport XYZ_D65 from \"./xyz-d65.js\";\n\nconst Yw = 203;\t// absolute luminance of media white\n\nexport default new ColorSpace({\n// Absolute CIE XYZ, with a D65 whitepoint,\n// as used in most HDR colorspaces as a starting point.\n// SDR spaces are converted per BT.2048\n// so that diffuse, media white is 203 cd/m\u00B2\n\tid: \"xyz-abs-d65\",\n\tcssId: \"--xyz-abs-d65\",\n\tname: \"Absolute XYZ D65\",\n\tcoords: {\n\t\tx: {\n\t\t\trefRange: [0, 9504.7],\n\t\t\tname: \"Xa\",\n\t\t},\n\t\ty: {\n\t\t\trefRange: [0, 10000],\n\t\t\tname: \"Ya\",\n\t\t},\n\t\tz: {\n\t\t\trefRange: [0, 10888.3],\n\t\t\tname: \"Za\",\n\t\t},\n\t},\n\n\tbase: XYZ_D65,\n\tfromBase (XYZ) {\n\t\t// Make XYZ absolute, not relative to media white\n\t\t// Maximum luminance in PQ is 10,000 cd/m\u00B2\n\t\t// Relative XYZ has Y=1 for media white\n\t\treturn XYZ.map (v => Math.max(v * Yw, 0));\n\t},\n\ttoBase (AbsXYZ) {\n\t\t// Convert to media-white relative XYZ\n\t\treturn AbsXYZ.map(v => Math.max(v / Yw, 0));\n\t},\n});\n", "import ColorSpace from \"../space.js\";\nimport {multiplyMatrices} from \"../util.js\";\nimport XYZ_Abs_D65 from \"./xyz-abs-d65.js\";\n\nconst b = 1.15;\nconst g = 0.66;\nconst n = 2610 / (2 ** 14);\nconst ninv = (2 ** 14) / 2610;\nconst c1 = 3424 / (2 ** 12);\nconst c2 = 2413 / (2 ** 7);\nconst c3 = 2392 / (2 ** 7);\nconst p = 1.7 * 2523 / (2 ** 5);\nconst pinv = (2 ** 5) / (1.7 * 2523);\nconst d = -0.56;\nconst d0 = 1.6295499532821566E-11;\n\nconst XYZtoCone_M = [\n\t[  0.41478972, 0.579999,  0.0146480 ],\n\t[ -0.2015100,  1.120649,  0.0531008 ],\n\t[ -0.0166008,  0.264800,  0.6684799 ],\n];\n// XYZtoCone_M inverted\nconst ConetoXYZ_M = [\n\t[  1.9242264357876067,  -1.0047923125953657,  0.037651404030618   ],\n\t[  0.35031676209499907,  0.7264811939316552, -0.06538442294808501 ],\n\t[ -0.09098281098284752, -0.3127282905230739,  1.5227665613052603  ],\n];\nconst ConetoIab_M = [\n\t[  0.5,       0.5,       0        ],\n\t[  3.524000, -4.066708,  0.542708 ],\n\t[  0.199076,  1.096799, -1.295875 ],\n];\n// ConetoIab_M inverted\nconst IabtoCone_M = [\n\t[ 1,                   0.1386050432715393,   0.05804731615611886 ],\n\t[ 0.9999999999999999, -0.1386050432715393,  -0.05804731615611886 ],\n\t[ 0.9999999999999998, -0.09601924202631895, -0.8118918960560388  ],\n];\n\nexport default new ColorSpace({\n\tid: \"jzazbz\",\n\tname: \"Jzazbz\",\n\tcoords: {\n\t\tjz: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Jz\",\n\t\t},\n\t\taz: {\n\t\t\trefRange: [-0.5, 0.5],\n\t\t},\n\t\tbz: {\n\t\t\trefRange: [-0.5, 0.5],\n\t\t},\n\t},\n\n\tbase: XYZ_Abs_D65,\n\tfromBase (XYZ) {\n\t\t// First make XYZ absolute, not relative to media white\n\t\t// Maximum luminance in PQ is 10,000 cd/m\u00B2\n\t\t// Relative XYZ has Y=1 for media white\n\t\t// BT.2048 says media white Y=203 at PQ 58\n\n\t\tlet [ Xa, Ya, Za ] = XYZ;\n\n\t\t// modify X and Y\n\t\tlet Xm = (b * Xa) - ((b - 1) * Za);\n\t\tlet Ym = (g * Ya) - ((g - 1) * Xa);\n\n\t\t// move to LMS cone domain\n\t\tlet LMS = multiplyMatrices(XYZtoCone_M, [ Xm, Ym, Za ]);\n\n\t\t// PQ-encode LMS\n\t\tlet PQLMS = LMS.map (function (val) {\n\t\t\tlet num = c1 + (c2 * ((val / 10000) ** n));\n\t\t\tlet denom = 1 + (c3 * ((val / 10000) ** n));\n\n\t\t\treturn (num / denom)  ** p;\n\t\t});\n\n\t\t// almost there, calculate Iz az bz\n\t\tlet [ Iz, az, bz] = multiplyMatrices(ConetoIab_M, PQLMS);\n\t\t// console.log({Iz, az, bz});\n\n\t\tlet Jz = ((1 + d) * Iz) / (1 + (d * Iz)) - d0;\n\t\treturn [Jz, az, bz];\n\t},\n\ttoBase (Jzazbz) {\n\t\tlet [Jz, az, bz] = Jzazbz;\n\t\tlet Iz = (Jz + d0) / (1 + d - d * (Jz + d0));\n\n\t\t// bring into LMS cone domain\n\t\tlet PQLMS = multiplyMatrices(IabtoCone_M, [ Iz, az, bz ]);\n\n\t\t// convert from PQ-coded to linear-light\n\t\tlet LMS = PQLMS.map(function (val) {\n\t\t\tlet num = (c1 - (val ** pinv));\n\t\t\tlet denom = (c3 * (val ** pinv)) - c2;\n\t\t\tlet x = 10000 * ((num / denom) ** ninv);\n\n\t\t\treturn (x); \t// luminance relative to diffuse white, [0, 70 or so].\n\t\t});\n\n\t\t// modified abs XYZ\n\t\tlet [ Xm, Ym, Za ] = multiplyMatrices(ConetoXYZ_M, LMS);\n\n\t\t// restore standard D50 relative XYZ, relative to media white\n\t\tlet Xa = (Xm + ((b - 1) * Za)) / b;\n\t\tlet Ya = (Ym + ((g - 1) * Xa)) / g;\n\t\treturn [ Xa, Ya, Za ];\n\t},\n\n\tformats: {\n\t\t// https://drafts.csswg.org/css-color-hdr/#Jzazbz\n\t\t\"color\": {\n\t\t\tcoords: [\"<number> | <percentage>\", \"<number> | <percentage>[-1,1]\", \"<number> | <percentage>[-1,1]\"],\n\t\t},\n\t},\n});\n", "import ColorSpace from \"../space.js\";\nimport Jzazbz from \"./jzazbz.js\";\nimport {constrain as constrainAngle} from \"../angles.js\";\n\nexport default new ColorSpace({\n\tid: \"jzczhz\",\n\tname: \"JzCzHz\",\n\tcoords: {\n\t\tjz: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Jz\",\n\t\t},\n\t\tcz: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Chroma\",\n\t\t},\n\t\thz: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\n\tbase: Jzazbz,\n\tfromBase (jzazbz) {\n\t\t// Convert to polar form\n\t\tlet [Jz, az, bz] = jzazbz;\n\t\tlet hue;\n\t\tconst \u03B5 = 0.0002; // chromatic components much smaller than a,b\n\n\t\tif (Math.abs(az) < \u03B5 && Math.abs(bz) < \u03B5) {\n\t\t\thue = NaN;\n\t\t}\n\t\telse {\n\t\t\thue = Math.atan2(bz, az) * 180 / Math.PI;\n\t\t}\n\n\t\treturn [\n\t\t\tJz, // Jz is still Jz\n\t\t\tMath.sqrt(az ** 2 + bz ** 2), // Chroma\n\t\t\tconstrainAngle(hue), // Hue, in degrees [0 to 360)\n\t\t];\n\t},\n\ttoBase (jzczhz) {\n\t\t// Convert from polar form\n\t\t// debugger;\n\t\treturn [\n\t\t\tjzczhz[0], // Jz is still Jz\n\t\t\tjzczhz[1] * Math.cos(jzczhz[2] * Math.PI / 180), // az\n\t\t\tjzczhz[1] * Math.sin(jzczhz[2] * Math.PI / 180),  // bz\n\t\t];\n\t},\n});\n", "import jzczhz from \"../spaces/jzczhz.js\";\nimport getColor from \"../getColor.js\";\n\n// More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in Lab\n\n// Uses JzCzHz, which has improved perceptual uniformity\n// and thus a simple Euclidean root-sum of \u0394L\u00B2 \u0394C\u00B2 \u0394H\u00B2\n// gives good results.\n\nexport default function (color, sample) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and a sample,\n\t// calculate deltaE in JzCzHz.\n\tlet [Jz1, Cz1, Hz1] = jzczhz.from(color);\n\tlet [Jz2, Cz2, Hz2] = jzczhz.from(sample);\n\n\t// Lightness and Chroma differences\n\t// sign does not matter as they are squared.\n\tlet \u0394J = Jz1 - Jz2;\n\tlet \u0394C = Cz1 - Cz2;\n\n\t// length of chord for \u0394H\n\tif ((Number.isNaN(Hz1)) && (Number.isNaN(Hz2))) {\n\t\t// both undefined hues\n\t\tHz1 = 0;\n\t\tHz2 = 0;\n\t}\n\telse if (Number.isNaN(Hz1)) {\n\t\t// one undefined, set to the defined hue\n\t\tHz1 = Hz2;\n\t}\n\telse if (Number.isNaN(Hz2)) {\n\t\tHz2 = Hz1;\n\t}\n\n\tlet \u0394h = Hz1 - Hz2;\n\tlet \u0394H = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin((\u0394h / 2) * (Math.PI / 180));\n\n\treturn Math.sqrt(\u0394J ** 2 + \u0394C ** 2 + \u0394H ** 2);\n}\n", "import ColorSpace from \"../space.js\";\nimport {multiplyMatrices} from \"../util.js\";\nimport XYZ_Abs_D65 from \"./xyz-abs-d65.js\";\n\nconst c1 = 3424 / 4096;\nconst c2 = 2413 / 128;\nconst c3 = 2392 / 128;\nconst m1 = 2610 / 16384;\nconst m2 = 2523 / 32;\nconst im1 = 16384 / 2610;\nconst im2 = 32 / 2523;\n\n// The matrix below includes the 4% crosstalk components\n// and is from the Dolby \"What is ICtCp\" paper\"\nconst XYZtoLMS_M = [\n\t[  0.3592832590121217,  0.6976051147779502, -0.0358915932320290 ],\n\t[ -0.1920808463704993,  1.1004767970374321,  0.0753748658519118 ],\n\t[  0.0070797844607479,  0.0748396662186362,  0.8433265453898765 ],\n];\n// linear-light Rec.2020 to LMS, again with crosstalk\n// rational terms from Jan Fr\u00F6hlich,\n// Encoding High Dynamic Range andWide Color Gamut Imagery, p.97\n// and ITU-R BT.2124-0 p.2\n/*\nconst Rec2020toLMS_M = [\n\t[ 1688 / 4096,  2146 / 4096,   262 / 4096 ],\n\t[  683 / 4096,  2951 / 4096,   462 / 4096 ],\n\t[   99 / 4096,   309 / 4096,  3688 / 4096 ]\n];\n*/\n// this includes the Ebner LMS coefficients,\n// the rotation, and the scaling to [-0.5,0.5] range\n// rational terms from Fr\u00F6hlich p.97\n// and ITU-R BT.2124-0 pp.2-3\nconst LMStoIPT_M = [\n\t[  2048 / 4096,   2048 / 4096,       0      ],\n\t[  6610 / 4096, -13613 / 4096,  7003 / 4096 ],\n\t[ 17933 / 4096, -17390 / 4096,  -543 / 4096 ],\n];\n\n// inverted matrices, calculated from the above\nconst IPTtoLMS_M = [\n\t[ 0.9999999999999998,  0.0086090370379328,  0.1110296250030260 ],\n\t[ 0.9999999999999998, -0.0086090370379328, -0.1110296250030259 ],\n\t[ 0.9999999999999998,  0.5600313357106791, -0.3206271749873188 ],\n];\n/*\nconst LMStoRec2020_M = [\n\t[ 3.4375568932814012112,   -2.5072112125095058195,   0.069654319228104608382],\n\t[-0.79142868665644156125,   1.9838372198740089874,  -0.19240853321756742626 ],\n\t[-0.025646662911506476363, -0.099240248643945566751, 1.1248869115554520431  ]\n];\n*/\nconst LMStoXYZ_M = [\n\t[  2.0701522183894223, -1.3263473389671563,  0.2066510476294053 ],\n\t[  0.3647385209748072,  0.6805660249472273, -0.0453045459220347 ],\n\t[ -0.0497472075358123, -0.0492609666966131,  1.1880659249923042 ],\n];\n\n// Only the PQ form of ICtCp is implemented here. There is also an HLG form.\n// from Dolby, \"WHAT IS ICTCP?\"\n// https://professional.dolby.com/siteassets/pdfs/ictcp_dolbywhitepaper_v071.pdf\n// and\n// Dolby, \"Perceptual Color Volume\n// Measuring the Distinguishable Colors of HDR and WCG Displays\"\n// https://professional.dolby.com/siteassets/pdfs/dolby-vision-measuring-perceptual-color-volume-v7.1.pdf\nexport default new ColorSpace({\n\tid: \"ictcp\",\n\tname: \"ICTCP\",\n\t// From BT.2100-2 page 7:\n\t// During production, signal values are expected to exceed the\n\t// range E\u2032 = [0.0 : 1.0]. This provides processing headroom and avoids\n\t// signal degradation during cascaded processing. Such values of E\u2032,\n\t// below 0.0 or exceeding 1.0, should not be clipped during production\n\t// and exchange.\n\t// Values below 0.0 should not be clipped in reference displays (even\n\t// though they represent \u201Cnegative\u201D light) to allow the black level of\n\t// the signal (LB) to be properly set using test signals known as \u201CPLUGE\u201D\n\tcoords: {\n\t\ti: {\n\t\t\trefRange: [0, 1],\t// Constant luminance,\n\t\t\tname: \"I\",\n\t\t},\n\t\tct: {\n\t\t\trefRange: [-0.5, 0.5],\t// Full BT.2020 gamut in range [-0.5, 0.5]\n\t\t\tname: \"CT\",\n\t\t},\n\t\tcp: {\n\t\t\trefRange: [-0.5, 0.5],\n\t\t\tname: \"CP\",\n\t\t},\n\t},\n\n\tbase: XYZ_Abs_D65,\n\tfromBase (XYZ) {\n\t\t// move to LMS cone domain\n\t\tlet LMS = multiplyMatrices(XYZtoLMS_M, XYZ);\n\n\t\treturn LMStoICtCp(LMS);\n\t},\n\ttoBase (ICtCp) {\n\t\tlet LMS = ICtCptoLMS(ICtCp);\n\n\t\treturn multiplyMatrices(LMStoXYZ_M, LMS);\n\t},\n});\n\nfunction LMStoICtCp (LMS) {\n\t// apply the PQ EOTF\n\t// we can't ever be dividing by zero because of the \"1 +\" in the denominator\n\tlet PQLMS = LMS.map (function (val) {\n\t\tlet num = c1 + (c2 * ((val / 10000) ** m1));\n\t\tlet denom = 1 + (c3 * ((val / 10000) ** m1));\n\n\t\treturn (num / denom)  ** m2;\n\t});\n\n\t// LMS to IPT, with rotation for Y'C'bC'r compatibility\n\treturn multiplyMatrices(LMStoIPT_M, PQLMS);\n}\n\nfunction ICtCptoLMS (ICtCp) {\n\tlet PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp);\n\n\t// From BT.2124-0 Annex 2 Conversion 3\n\tlet LMS = PQLMS.map (function (val) {\n\t\tlet num  = Math.max((val ** im2) - c1, 0);\n\t\tlet denom = (c2 - (c3 * (val ** im2)));\n\t\treturn 10000 * ((num / denom) ** im1);\n\t});\n\n\treturn LMS;\n}\n", "import ictcp from \"../spaces/ictcp.js\";\nimport getColor from \"../getColor.js\";\n\n// Delta E in ICtCp space,\n// which the ITU calls Delta E ITP, which is shorter\n// formulae from ITU Rec. ITU-R BT.2124-0\n\nexport default function (color, sample) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and a sample,\n\t// calculate deltaE in ICtCp\n\t// which is simply the Euclidean distance\n\n\tlet [ I1, T1, P1 ] = ictcp.from(color);\n\tlet [ I2, T2, P2 ] = ictcp.from(sample);\n\n\t// the 0.25 factor is to undo the encoding scaling in Ct\n\t// the 720 is so that 1 deltaE = 1 JND\n\t// per  ITU-R BT.2124-0 p.3\n\n\treturn 720 * Math.sqrt((I1 - I2) ** 2 + (0.25 * (T1 - T2) ** 2) + (P1 - P2) ** 2);\n}\n", "import ColorSpace from \"../space.js\";\nimport {multiplyMatrices, interpolate, copySign, spow, zdiv, bisectLeft} from \"../util.js\";\nimport {constrain} from \"../angles.js\";\nimport xyz_d65 from \"./xyz-d65.js\";\nimport {WHITES} from \"../adapt.js\";\n\nconst white = WHITES.D65;\nconst adaptedCoef = 0.42;\nconst adaptedCoefInv = 1 / adaptedCoef;\nconst tau = 2 * Math.PI;\n\nconst cat16 = [\n\t[  0.401288,  0.650173, -0.051461 ],\n\t[ -0.250268,  1.204414,  0.045854 ],\n\t[ -0.002079,  0.048952,  0.953127 ],\n];\n\nconst cat16Inv = [\n\t[1.8620678550872327, -1.0112546305316843, 0.14918677544445175],\n\t[0.38752654323613717, 0.6214474419314753, -0.008973985167612518],\n\t[-0.015841498849333856, -0.03412293802851557, 1.0499644368778496],\n];\n\nconst m1 = [\n\t[460.0, 451.0, 288.0],\n\t[460.0, -891.0, -261.0],\n\t[460.0, -220.0, -6300.0],\n];\n\nconst surroundMap = {\n\tdark: [0.8, 0.525, 0.8],\n\tdim: [0.9, 0.59, 0.9],\n\taverage: [1, 0.69, 1],\n};\n\nconst hueQuadMap = {\n\t// Red, Yellow, Green, Blue, Red\n\th: [20.14, 90.00, 164.25, 237.53, 380.14],\n\te: [0.8, 0.7, 1.0, 1.2, 0.8],\n\tH: [0.0, 100.0, 200.0, 300.0, 400.0],\n};\n\nconst rad2deg = 180 / Math.PI;\nconst deg2rad = Math.PI / 180;\n\nexport function adapt (coords, fl) {\n\tconst temp = coords.map(c => {\n\t\tconst x = spow(fl * Math.abs(c) * 0.01, adaptedCoef);\n\t\treturn 400 * copySign(x, c) / (x + 27.13);\n\t});\n\treturn temp;\n}\n\nexport function unadapt (adapted, fl) {\n\tconst constant = 100 / fl * (27.13 ** adaptedCoefInv);\n\treturn adapted.map(c => {\n\t\tconst cabs = Math.abs(c);\n\t\treturn copySign(constant * spow(cabs / (400 - cabs), adaptedCoefInv), c);\n\t});\n}\n\nexport function hueQuadrature (h) {\n\tlet hp = constrain(h);\n\tif (hp <= hueQuadMap.h[0]) {\n\t\thp += 360;\n\t}\n\n\tconst i = bisectLeft(hueQuadMap.h, hp) - 1;\n\tconst [hi, hii] = hueQuadMap.h.slice(i, i + 2);\n\tconst [ei, eii] = hueQuadMap.e.slice(i, i + 2);\n\tconst Hi = hueQuadMap.H[i];\n\n\tconst t = (hp - hi) / ei;\n\treturn Hi + (100 * t) / (t + (hii - hp) / eii);\n}\n\nexport function invHueQuadrature (H) {\n\tlet Hp = ((H % 400 + 400) % 400);\n\tconst i = Math.floor(0.01 * Hp);\n\tHp = Hp % 100;\n\tconst [hi, hii] = hueQuadMap.h.slice(i, i + 2);\n\tconst [ei, eii] = hueQuadMap.e.slice(i, i + 2);\n\n\treturn constrain(\n\t\t(Hp * (eii * hi - ei * hii) - 100 * hi * eii) /\n\t\t(Hp * (eii - ei) - 100 * eii),\n\t);\n}\n\nexport function environment (\n\trefWhite,\n\tadaptingLuminance,\n\tbackgroundLuminance,\n\tsurround,\n\tdiscounting,\n) {\n\n\tconst env = {};\n\n\tenv.discounting = discounting;\n\tenv.refWhite = refWhite;\n\tenv.surround = surround;\n\tconst xyzW = refWhite.map(c => {\n\t\treturn c * 100;\n\t});\n\n\t// The average luminance of the environment in `cd/m^2cd/m` (a.k.a. nits)\n\tenv.la = adaptingLuminance;\n\t// The relative luminance of the nearby background\n\tenv.yb = backgroundLuminance;\n\t// Absolute luminance of the reference white.\n\tconst yw = xyzW[1];\n\n\t// Cone response for reference white\n\tconst rgbW = multiplyMatrices(cat16, xyzW);\n\n\t// Surround: dark, dim, and average\n\tsurround = surroundMap[env.surround];\n\tconst f = surround[0];\n\tenv.c = surround[1];\n\tenv.nc = surround[2];\n\n\tconst k = 1 / (5 * env.la + 1);\n\tconst k4 = k ** 4;\n\n\t// Factor of luminance level adaptation\n\tenv.fl = (k4 * env.la + 0.1 * (1 - k4) * (1 - k4) * Math.cbrt(5 * env.la));\n\tenv.flRoot = env.fl ** 0.25;\n\n\tenv.n = env.yb / yw;\n\tenv.z = 1.48 + Math.sqrt(env.n);\n\tenv.nbb = 0.725 * (env.n ** -0.2);\n\tenv.ncb = env.nbb;\n\n\t// Degree of adaptation calculating if not discounting\n\t// illuminant (assumed eye is fully adapted)\n\tconst d = (discounting) ?\n\t\t1 :\n\t\tMath.max(\n\t\t\tMath.min(f * (1 - 1 / 3.6 * Math.exp((-env.la - 42) / 92)), 1),\n\t\t\t0,\n\t\t);\n\tenv.dRgb = rgbW.map(c => {\n\t\treturn interpolate(1, yw / c, d);\n\t});\n\tenv.dRgbInv = env.dRgb.map(c => {\n\t\treturn 1 / c;\n\t});\n\n\t// Achromatic response\n\tconst rgbCW = rgbW.map((c, i) => {\n\t\treturn c * env.dRgb[i];\n\t});\n\tconst rgbAW = adapt(rgbCW, env.fl);\n\tenv.aW = env.nbb * (2 * rgbAW[0] + rgbAW[1] + 0.05 * rgbAW[2]);\n\n\t// console.log(env);\n\n\treturn env;\n}\n\n// Pre-calculate everything we can with the viewing conditions\nconst viewingConditions = environment(\n\twhite,\n\t64 / Math.PI * 0.2, 20,\n\t\"average\",\n\tfalse,\n);\n\nexport function fromCam16 (cam16, env) {\n\n\t// These check ensure one, and only one attribute for a\n\t// given category is provided.\n\tif (!((cam16.J !== undefined) ^ (cam16.Q !== undefined))) {\n\t\tthrow new Error(\"Conversion requires one and only one: 'J' or 'Q'\");\n\t}\n\n\tif (!((cam16.C !== undefined) ^ (cam16.M !== undefined) ^ (cam16.s !== undefined))) {\n\t\tthrow new Error(\"Conversion requires one and only one: 'C', 'M' or 's'\");\n\t}\n\n\t// Hue is absolutely required\n\tif (!((cam16.h !== undefined) ^ (cam16.H !== undefined))) {\n\t\tthrow new Error(\"Conversion requires one and only one: 'h' or 'H'\");\n\t}\n\n\t// Black\n\tif (cam16.J === 0.0 || cam16.Q === 0.0) {\n\t\treturn [0.0, 0.0, 0.0];\n\t}\n\n\t// Break hue into Cartesian components\n\tlet hRad = 0.0;\n\tif (cam16.h !== undefined) {\n\t\thRad = constrain(cam16.h) * deg2rad;\n\t}\n\telse {\n\t\thRad = invHueQuadrature(cam16.H) * deg2rad;\n\t}\n\n\tconst cosh = Math.cos(hRad);\n\tconst sinh = Math.sin(hRad);\n\n\t// Calculate `Jroot` from one of the lightness derived coordinates.\n\tlet Jroot = 0.0;\n\tif (cam16.J !== undefined) {\n\t\tJroot = spow(cam16.J, 1 / 2) * 0.1;\n\t}\n\telse if (cam16.Q !== undefined) {\n\t\tJroot = 0.25 * env.c * cam16.Q / ((env.aW + 4) * env.flRoot);\n\t}\n\n\t// Calculate the `t` value from one of the chroma derived coordinates\n\tlet alpha = 0.0;\n\tif (cam16.C !== undefined) {\n\t\talpha = cam16.C / Jroot;\n\t}\n\telse if (cam16.M !== undefined) {\n\t\talpha = (cam16.M / env.flRoot) / Jroot;\n\t}\n\telse if (cam16.s !== undefined) {\n\t\talpha = 0.0004 * (cam16.s ** 2) * (env.aW + 4) / env.c;\n\t}\n\tconst t = spow(\n\t\talpha * Math.pow(1.64 - Math.pow(0.29, env.n), -0.73),\n\t\t10 / 9,\n\t);\n\n\t// Eccentricity\n\tconst et = 0.25 * (Math.cos(hRad + 2) + 3.8);\n\n\t// Achromatic response\n\tconst A = env.aW * spow(Jroot, 2 / env.c / env.z);\n\n\t// Calculate red-green and yellow-blue components\n\tconst p1 = 5e4 / 13 * env.nc * env.ncb * et;\n\tconst p2 = A / env.nbb;\n\tconst r = (\n\t\t23 * (p2 + 0.305) *\n\t\tzdiv(t, 23 * p1 + t * (11 * cosh + 108 * sinh))\n\t);\n\tconst a = r * cosh;\n\tconst b = r * sinh;\n\n\t// Calculate back from cone response to XYZ\n\tconst rgb_c = unadapt(\n\t\tmultiplyMatrices(m1, [p2, a, b]).map(c => {\n\t\t\treturn c * 1 / 1403;\n\t\t}),\n\t\tenv.fl,\n\t);\n\treturn multiplyMatrices(\n\t\tcat16Inv,\n\t\trgb_c.map((c, i) => {\n\t\t\treturn c * env.dRgbInv[i];\n\t\t}),\n\t).map(c => {\n\t\treturn c / 100;\n\t});\n}\n\n\nexport function toCam16 (xyzd65, env) {\n\t// Cone response\n\tconst xyz100 = xyzd65.map(c => {\n\t\treturn c * 100;\n\t});\n\tconst rgbA = adapt(\n\t\tmultiplyMatrices(cat16, xyz100).map((c, i) => {\n\t\t\treturn c * env.dRgb[i];\n\t\t}),\n\t\tenv.fl,\n\t);\n\n\t// Calculate hue from red-green and yellow-blue components\n\tconst a = rgbA[0] + (-12 * rgbA[1] + rgbA[2]) / 11;\n\tconst b = (rgbA[0] + rgbA[1] - 2 * rgbA[2]) / 9;\n\tconst hRad = ((Math.atan2(b, a) % tau) + tau) % tau;\n\n\t// Eccentricity\n\tconst et = 0.25 * (Math.cos(hRad + 2) + 3.8);\n\n\tconst t = (\n\t\t5e4 / 13 * env.nc * env.ncb *\n\t\tzdiv(\n\t\t\tet * Math.sqrt(a ** 2 + b ** 2),\n\t\t\trgbA[0] + rgbA[1] + 1.05 * rgbA[2] + 0.305,\n\t\t)\n\t);\n\tconst alpha = spow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, env.n), 0.73);\n\n\t// Achromatic response\n\tconst A = env.nbb * (2 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]);\n\n\tconst Jroot = spow(A / env.aW, 0.5 * env.c * env.z);\n\n\t// Lightness\n\tconst J = 100 * spow(Jroot, 2);\n\n\t// Brightness\n\tconst Q = (4 / env.c * Jroot * (env.aW + 4) * env.flRoot);\n\n\t// Chroma\n\tconst C = alpha * Jroot;\n\n\t// Colorfulness\n\tconst M = C * env.flRoot;\n\n\t// Hue\n\tconst h = constrain(hRad * rad2deg);\n\n\t// Hue quadrature\n\tconst H = hueQuadrature(h);\n\n\t// Saturation\n\tconst s = 50 * spow(env.c * alpha / (env.aW + 4), 1 / 2);\n\n\t// console.log({J: J, C: C, h: h, s: s, Q: Q, M: M, H: H});\n\n\treturn {J: J, C: C, h: h, s: s, Q: Q, M: M, H: H};\n}\n\n\n// Provided as a way to directly evaluate the CAM16 model\n// https://observablehq.com/@jrus/cam16: reference implementation\n// https://arxiv.org/pdf/1802.06067.pdf: Nico Schl\u00F6mer\n// https://onlinelibrary.wiley.com/doi/pdf/10.1002/col.22324: hue quadrature\n// https://www.researchgate.net/publication/318152296_Comprehensive_color_solutions_CAM16_CAT16_and_CAM16-UCS\n// Results compared against: https://github.com/colour-science/colour\nexport default new ColorSpace({\n\tid: \"cam16-jmh\",\n\tcssId: \"--cam16-jmh\",\n\tname: \"CAM16-JMh\",\n\tcoords: {\n\t\tj: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"J\",\n\t\t},\n\t\tm: {\n\t\t\trefRange: [0, 105.0],\n\t\t\tname: \"Colorfulness\",\n\t\t},\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\n\tbase: xyz_d65,\n\n\tfromBase (xyz) {\n\t\tconst cam16 = toCam16(xyz, viewingConditions);\n\t\treturn [cam16.J, cam16.M, cam16.h];\n\t},\n\ttoBase (cam16) {\n\t\treturn fromCam16(\n\t\t\t{J: cam16[0], M: cam16[1], h: cam16[2]},\n\t\t\tviewingConditions,\n\t\t);\n\t},\n});\n", "import ColorSpace from \"../space.js\";\nimport {constrain} from \"../angles.js\";\nimport xyz_d65 from \"./xyz-d65.js\";\nimport {fromCam16, toCam16, environment} from \"./cam16.js\";\nimport {WHITES} from \"../adapt.js\";\n\nconst white = WHITES.D65;\nconst \u03B5 = 216 / 24389;  // 6^3/29^3 == (24/116)^3\nconst \u03BA = 24389 / 27;   // 29^3/3^3\n\nfunction toLstar (y) {\n\t// Convert XYZ Y to L*\n\n\tconst fy = (y > \u03B5) ? Math.cbrt(y) : (\u03BA * y + 16) / 116;\n\treturn (116.0 * fy) - 16.0;\n}\n\nfunction fromLstar (lstar) {\n\t// Convert L* back to XYZ Y\n\n\treturn (lstar > 8) ?  Math.pow((lstar + 16) / 116, 3) : lstar / \u03BA;\n}\n\nfunction fromHct (coords, env) {\n\t// Use Newton's method to try and converge as quick as possible or\n\t// converge as close as we can. While the requested precision is achieved\n\t// most of the time, it may not always be achievable. Especially past the\n\t// visible spectrum, the algorithm will likely struggle to get the same\n\t// precision. If, for whatever reason, we cannot achieve the accuracy we\n\t// seek in the allotted iterations, just return the closest we were able to\n\t// get.\n\n\tlet [h, c, t] = coords;\n\tlet xyz = [];\n\tlet j = 0;\n\n\t// Shortcut out for black\n\tif (t === 0) {\n\t\treturn [0.0, 0.0, 0.0];\n\t}\n\n\t// Calculate the Y we need to target\n\tlet y = fromLstar(t);\n\n\t// A better initial guess yields better results. Polynomials come from\n\t// curve fitting the T vs J response.\n\tif (t > 0) {\n\t\tj = 0.00379058511492914 * t ** 2 + 0.608983189401032 * t + 0.9155088574762233;\n\t}\n\telse {\n\t\tj = 9.514440756550361e-06 * t ** 2 + 0.08693057439788597 * t - 21.928975842194614;\n\t}\n\n\t// Threshold of how close is close enough, and max number of attempts.\n\t// More precision and more attempts means more time spent iterating. Higher\n\t// required precision gives more accuracy but also increases the chance of\n\t// not hitting the goal. 2e-12 allows us to convert round trip with\n\t// reasonable accuracy of six decimal places or more.\n\tconst threshold = 2e-12;\n\tconst max_attempts = 15;\n\n\tlet attempt = 0;\n\tlet last = Infinity;\n\tlet best = j;\n\n\t// Try to find a J such that the returned y matches the returned y of the L*\n\twhile (attempt <= max_attempts) {\n\t\txyz = fromCam16({J: j, C: c, h: h}, env);\n\n\t\t// If we are within range, return XYZ\n\t\t// If we are closer than last time, save the values\n\t\tconst delta = Math.abs(xyz[1] - y);\n\t\tif (delta < last) {\n\t\t\tif (delta <= threshold) {\n\t\t\t\treturn xyz;\n\t\t\t}\n\t\t\tbest = j;\n\t\t\tlast = delta;\n\t\t}\n\n\t\t// f(j_root) = (j ** (1 / 2)) * 0.1\n\t\t// f(j) = ((f(j_root) * 100) ** 2) / j - 1 = 0\n\t\t// f(j_root) = Y = y / 100\n\t\t// f(j) = (y ** 2) / j - 1\n\t\t// f'(j) = (2 * y) / j\n\t\tj = j - (xyz[1] - y) * j / (2 * xyz[1]);\n\n\t\tattempt += 1;\n\t}\n\n\t// We could not acquire the precision we desired,\n\t// return our closest attempt.\n\treturn fromCam16({J: j, C: c, h: h}, env);\n}\n\nfunction toHct (xyz, env) {\n\t// Calculate HCT by taking the L* of CIE LCh D65 and CAM16 chroma and hue.\n\n\tconst t = toLstar(xyz[1]);\n\tif (t === 0.0) {\n\t\treturn [0.0, 0.0, 0.0];\n\t}\n\tconst cam16 = toCam16(xyz, viewingConditions);\n\treturn [constrain(cam16.h), cam16.C, t];\n}\n\n// Pre-calculate everything we can with the viewing conditions\nexport const viewingConditions = environment(\n\twhite, 200 / Math.PI * fromLstar(50.0),\n\tfromLstar(50.0) * 100,\n\t\"average\",\n\tfalse,\n);\n\n// https://material.io/blog/science-of-color-design\n// This is not a port of the material-color-utilities,\n// but instead implements the full color space as described,\n// combining CAM16 JCh and Lab D65. This does not clamp conversion\n// to HCT to specific chroma bands and provides support for wider\n// gamuts than Google currently supports and does so at a greater\n// precision (> 8 bits back to sRGB).\n// This implementation comes from https://github.com/facelessuser/coloraide\n// which is licensed under MIT.\nexport default new ColorSpace({\n\tid: \"hct\",\n\tname: \"HCT\",\n\tcoords: {\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t\tc: {\n\t\t\trefRange: [0, 145],\n\t\t\tname: \"Colorfulness\",\n\t\t},\n\t\tt: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"Tone\",\n\t\t},\n\t},\n\n\tbase: xyz_d65,\n\n\tfromBase (xyz) {\n\t\treturn toHct(xyz, viewingConditions);\n\t},\n\ttoBase (hct) {\n\t\treturn fromHct(hct, viewingConditions);\n\t},\n\tformats: {\n\t\tcolor: {\n\t\t\tid: \"--hct\",\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage> | <number>\", \"<percentage> | <number>\"],\n\t\t},\n\t},\n});\n", "import hct from \"../spaces/hct.js\";\nimport {viewingConditions} from \"../spaces/hct.js\";\nimport getColor from \"../getColor.js\";\n\nconst rad2deg = 180 / Math.PI;\nconst deg2rad = Math.PI / 180;\nconst ucsCoeff = [1.00, 0.007, 0.0228];\n\n/**\n* Convert HCT chroma and hue (CAM16 JMh colorfulness and hue) using UCS logic for a and b.\n* @param {number[]} coords - HCT coordinates.\n* @return {number[]}\n*/\nfunction convertUcsAb (coords) {\n\t// We want the distance between the actual color.\n\t// If chroma is negative, it will throw off our calculations.\n\t// Normally, converting back to the base and forward will correct it.\n\t// If we have a negative chroma after this, then we have a color that\n\t// cannot resolve to positive chroma.\n\tif (coords[1] < 0) {\n\t\tcoords = hct.fromBase(hct.toBase(coords));\n\t}\n\n\t// Only in extreme cases (usually outside the visible spectrum)\n\t// can the input value for log become negative.\n\t// Avoid domain error by forcing a zero result via \"max\" if necessary.\n\tconst M = Math.log(Math.max(1 + ucsCoeff[2] * coords[1] * viewingConditions.flRoot, 1.0)) / ucsCoeff[2];\n\tconst hrad = coords[0] * deg2rad;\n\tconst a = M * Math.cos(hrad);\n\tconst b = M * Math.sin(hrad);\n\n\treturn [coords[2], a, b];\n}\n\n\n/**\n* Color distance using HCT.\n* @param {Color} color - Color to compare.\n* @param {Color} sample - Color to compare.\n* @return {number[]}\n*/\nexport default function (color, sample) {\n\t[color, sample] = getColor([color, sample]);\n\n\tlet [ t1, a1, b1 ] = convertUcsAb(hct.from(color));\n\tlet [ t2, a2, b2 ] = convertUcsAb(hct.from(sample));\n\n\t// Use simple euclidean distance with a and b using UCS conversion\n\t// and LCh lightness (HCT tone).\n\treturn Math.sqrt((t1 - t2) ** 2 + (a1 - a2) ** 2 + (b1 - b2) ** 2);\n}\n", "import deltaE76 from \"./deltaE76.js\";\nimport deltaECMC from \"./deltaECMC.js\";\nimport deltaE2000 from \"./deltaE2000.js\";\nimport deltaEJz from \"./deltaEJz.js\";\nimport deltaEITP from \"./deltaEITP.js\";\nimport deltaEOK from \"./deltaEOK.js\";\nimport deltaEHCT from \"./deltaEHCT.js\";\n\nexport {\n\tdeltaE76,\n\tdeltaECMC,\n\tdeltaE2000,\n\tdeltaEJz,\n\tdeltaEITP,\n\tdeltaEOK,\n\tdeltaEHCT,\n};\n\nexport default {\n\tdeltaE76,\n\tdeltaECMC,\n\tdeltaE2000,\n\tdeltaEJz,\n\tdeltaEITP,\n\tdeltaEOK,\n\tdeltaEHCT,\n};\n", "import * as util from \"./util.js\";\nimport ColorSpace from \"./space.js\";\nimport defaults from \"./defaults.js\";\nimport deltaE2000 from \"./deltaE/deltaE2000.js\";\nimport deltaEOK from \"./deltaE/deltaEOK.js\";\nimport inGamut from \"./inGamut.js\";\nimport to from \"./to.js\";\nimport get from \"./get.js\";\nimport oklab from \"./spaces/oklab.js\";\nimport set from \"./set.js\";\nimport clone from \"./clone.js\";\nimport getColor from \"./getColor.js\";\nimport deltaEMethods from \"./deltaE/index.js\";\nimport {WHITES} from \"./adapt.js\";\n\n/**\n * Calculate the epsilon to 2 degrees smaller than the specified JND.\n * @param {Number} jnd - The target \"just noticeable difference\".\n * @returns {Number}\n */\nfunction calcEpsilon (jnd) {\n\t// Calculate the epsilon to 2 degrees smaller than the specified JND.\n\n\tconst order = (!jnd) ? 0 : Math.floor(Math.log10(Math.abs(jnd)));\n\t// Limit to an arbitrary value to ensure value is never too small and causes infinite loops.\n\treturn Math.max(parseFloat(`1e${order - 2}`), 1e-6);\n}\n\nconst GMAPPRESET = {\n\t\"hct\": {\n\t\tmethod: \"hct.c\",\n\t\tjnd: 2,\n\t\tdeltaEMethod: \"hct\",\n\t\tblackWhiteClamp: {},\n\t},\n\t\"hct-tonal\": {\n\t\tmethod: \"hct.c\",\n\t\tjnd: 0,\n\t\tdeltaEMethod: \"hct\",\n\t\tblackWhiteClamp: { channel: \"hct.t\", min: 0, max: 100 },\n\t},\n};\n\n/**\n * Force coordinates to be in gamut of a certain color space.\n * Mutates the color it is passed.\n * @param {Object|string} options object or spaceId string\n * @param {string} options.method - How to force into gamut.\n *        If \"clip\", coordinates are just clipped to their reference range.\n *        If \"css\", coordinates are reduced according to the CSS 4 Gamut Mapping Algorithm.\n *        If in the form [colorSpaceId].[coordName], that coordinate is reduced\n *        until the color is in gamut. Please note that this may produce nonsensical\n *        results for certain coordinates (e.g. hue) or infinite loops if reducing the coordinate never brings the color in gamut.\n * @param {ColorSpace|string} options.space - The space whose gamut we want to map to\n * @param {string} options.deltaEMethod - The delta E method to use while performing gamut mapping.\n *        If no method is specified, delta E 2000 is used.\n * @param {Number} options.jnd - The \"just noticeable difference\" to target.\n * @param {Object} options.blackWhiteClamp - Used to configure SDR black and clamping.\n *        \"channel\" indicates the \"space.channel\" to use for determining when to clamp.\n *        \"min\" indicates the lower limit for black clamping and \"max\" indicates the upper\n *        limit for white clamping.\n */\n\nexport default function toGamut (\n\tcolor,\n\t{\n\t\tmethod = defaults.gamut_mapping,\n\t\tspace = undefined,\n\t\tdeltaEMethod = \"\",\n\t\tjnd = 2,\n\t\tblackWhiteClamp = {},\n\t} = {},\n) {\n\tcolor = getColor(color);\n\n\tif (util.isString(arguments[1])) {\n\t\tspace = arguments[1];\n\t}\n\telse if (!space) {\n\t\tspace = color.space;\n\t}\n\n\tspace = ColorSpace.get(space);\n\n\t// 3 spaces:\n\t// color.space: current color space\n\t// space: space whose gamut we are mapping to\n\t// mapSpace: space with the coord we're reducing\n\n\tif (inGamut(color, space, { epsilon: 0 })) {\n\t\treturn color;\n\t}\n\n\tlet spaceColor;\n\tif (method === \"css\") {\n\t\tspaceColor = toGamutCSS(color, { space });\n\t}\n\telse {\n\t\tif (method !== \"clip\" && !inGamut(color, space)) {\n\n\t\t\tif (Object.prototype.hasOwnProperty.call(GMAPPRESET, method)) {\n\t\t\t\t({method, jnd, deltaEMethod, blackWhiteClamp} = GMAPPRESET[method]);\n\t\t\t}\n\n\t\t\t// Get the correct delta E method\n\t\t\tlet de = deltaE2000;\n\t\t\tif (deltaEMethod !== \"\") {\n\t\t\t\tfor (let m in deltaEMethods) {\n\t\t\t\t\tif (\"deltae\" + deltaEMethod.toLowerCase() === m.toLowerCase()) {\n\t\t\t\t\t\tde = deltaEMethods[m];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet clipped = toGamut(to(color, space), { method: \"clip\", space });\n\t\t\tif (de(color, clipped) > jnd) {\n\n\t\t\t\t// Clamp to SDR white and black if required\n\t\t\t\tif (Object.keys(blackWhiteClamp).length === 3) {\n\t\t\t\t\tlet channelMeta = ColorSpace.resolveCoord(blackWhiteClamp.channel);\n\t\t\t\t\tlet channel = get(to(color, channelMeta.space), channelMeta.id);\n\t\t\t\t\tif (util.isNone(channel)) {\n\t\t\t\t\t\tchannel = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (channel >= blackWhiteClamp.max) {\n\t\t\t\t\t\treturn to({ space: \"xyz-d65\", coords: WHITES[\"D65\"] }, color.space);\n\t\t\t\t\t}\n\t\t\t\t\telse if (channel <= blackWhiteClamp.min) {\n\t\t\t\t\t\treturn to({ space: \"xyz-d65\", coords: [0, 0, 0] }, color.space);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Reduce a coordinate of a certain color space until the color is in gamut\n\t\t\t\tlet coordMeta = ColorSpace.resolveCoord(method);\n\t\t\t\tlet mapSpace = coordMeta.space;\n\t\t\t\tlet coordId = coordMeta.id;\n\n\t\t\t\tlet mappedColor = to(color, mapSpace);\n\t\t\t\t// If we were already in the mapped color space, we need to resolve undefined channels\n\t\t\t\tmappedColor.coords.forEach((c, i) => {\n\t\t\t\t\tif (util.isNone(c)) {\n\t\t\t\t\t\tmappedColor.coords[i] = 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlet bounds = coordMeta.range || coordMeta.refRange;\n\t\t\t\tlet min = bounds[0];\n\t\t\t\tlet \u03B5 = calcEpsilon(jnd);\n\t\t\t\tlet low = min;\n\t\t\t\tlet high = get(mappedColor, coordId);\n\n\t\t\t\twhile (high - low > \u03B5) {\n\t\t\t\t\tlet clipped = clone(mappedColor);\n\t\t\t\t\tclipped = toGamut(clipped, { space, method: \"clip\" });\n\t\t\t\t\tlet deltaE = de(mappedColor, clipped);\n\n\t\t\t\t\tif (deltaE - jnd < \u03B5) {\n\t\t\t\t\t\tlow = get(mappedColor, coordId);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thigh = get(mappedColor, coordId);\n\t\t\t\t\t}\n\n\t\t\t\t\tset(mappedColor, coordId, (low + high) / 2);\n\t\t\t\t}\n\n\t\t\t\tspaceColor = to(mappedColor, space);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tspaceColor = clipped;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tspaceColor = to(color, space);\n\t\t}\n\n\t\tif (method === \"clip\" // Dumb coord clipping\n\t\t\t// finish off smarter gamut mapping with clip to get rid of \u03B5, see #17\n\t\t\t|| !inGamut(spaceColor, space, { epsilon: 0 })\n\t\t) {\n\t\t\tlet bounds = Object.values(space.coords).map(c => c.range || []);\n\n\t\t\tspaceColor.coords = spaceColor.coords.map((c, i) => {\n\t\t\t\tlet [min, max] = bounds[i];\n\n\t\t\t\tif (min !== undefined) {\n\t\t\t\t\tc = Math.max(min, c);\n\t\t\t\t}\n\n\t\t\t\tif (max !== undefined) {\n\t\t\t\t\tc = Math.min(c, max);\n\t\t\t\t}\n\n\t\t\t\treturn c;\n\t\t\t});\n\t\t}\n\t}\n\n\tif (space !== color.space) {\n\t\tspaceColor = to(spaceColor, color.space);\n\t}\n\n\tcolor.coords = spaceColor.coords;\n\treturn color;\n}\n\ntoGamut.returns = \"color\";\n\n// The reference colors to be used if lightness is out of the range 0-1 in the\n// `Oklch` space. These are created in the `Oklab` space, as it is used by the\n// DeltaEOK calculation, so it is guaranteed to be imported.\nconst COLORS = {\n\tWHITE: { space: oklab, coords: [1, 0, 0] },\n\tBLACK: { space: oklab, coords: [0, 0, 0] },\n};\n\n/**\n * Given a color `origin`, returns a new color that is in gamut using\n * the CSS Gamut Mapping Algorithm. If `space` is specified, it will be in gamut\n * in `space`, and returned in `space`. Otherwise, it will be in gamut and\n * returned in the color space of `origin`.\n * @param {Object} origin\n * @param {Object} options\n * @param {ColorSpace|string} options.space\n * @returns {Color}\n */\nexport function toGamutCSS (origin, {space} = {}) {\n\tconst JND = 0.02;\n\tconst \u03B5 = 0.0001;\n\n\torigin = getColor(origin);\n\n\tif (!space) {\n\t\tspace = origin.space;\n\t}\n\n\tspace = ColorSpace.get(space);\n\tconst oklchSpace = ColorSpace.get(\"oklch\");\n\n\tif (space.isUnbounded) {\n\t\treturn to(origin, space);\n\t}\n\n\tconst origin_OKLCH = to(origin, oklchSpace);\n\tlet L = origin_OKLCH.coords[0];\n\n\t// return media white or black, if lightness is out of range\n\tif (L >= 1) {\n\t\tconst white = to(COLORS.WHITE, space);\n\t\twhite.alpha = origin.alpha;\n\t\treturn to(white, space);\n\t}\n\tif (L <= 0) {\n\t\tconst black = to(COLORS.BLACK, space);\n\t\tblack.alpha = origin.alpha;\n\t\treturn to(black, space);\n\t}\n\n\tif (inGamut(origin_OKLCH, space, {epsilon: 0})) {\n\t\treturn to(origin_OKLCH, space);\n\t}\n\n\tfunction clip (_color) {\n\t\tconst destColor = to(_color, space);\n\t\tconst spaceCoords = Object.values(space.coords);\n\t\tdestColor.coords = destColor.coords.map((coord, index) => {\n\t\t\tif (\"range\" in spaceCoords[index]) {\n\t\t\t\tconst [min, max] =  spaceCoords[index].range;\n\t\t\t\treturn util.clamp(min, coord, max);\n\t\t\t}\n\t\t\treturn coord;\n\t\t});\n\t\treturn destColor;\n\t}\n\tlet min = 0;\n\tlet max = origin_OKLCH.coords[1];\n\tlet min_inGamut = true;\n\tlet current = clone(origin_OKLCH);\n\tlet clipped = clip(current);\n\n\tlet E = deltaEOK(clipped, current);\n\tif (E < JND) {\n\t\treturn clipped;\n\t}\n\n\twhile ((max - min) > \u03B5) {\n\t\tconst chroma = (min + max) / 2;\n\t\tcurrent.coords[1] = chroma;\n\t\tif (min_inGamut && inGamut(current, space, {epsilon: 0})) {\n\t\t\tmin = chroma;\n\t\t}\n\t\telse {\n\t\t\tclipped = clip(current);\n\t\t\tE = deltaEOK(clipped, current);\n\t\t\tif (E < JND) {\n\t\t\t\tif ((JND - E < \u03B5)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmin_inGamut = false;\n\t\t\t\t\tmin = chroma;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmax = chroma;\n\t\t\t}\n\t\t}\n\t}\n\treturn clipped;\n}\n", "import getColor from \"./getColor.js\";\nimport ColorSpace from \"./space.js\";\nimport toGamut from \"./toGamut.js\";\n\n/**\n * Convert to color space and return a new color\n * @param {Object|string} space - Color space object or id\n * @param {Object} options\n * @param {boolean} options.inGamut - Whether to force resulting color in gamut\n * @returns {Color}\n */\nexport default function to (color, space, {inGamut} = {}) {\n\tcolor = getColor(color);\n\tspace = ColorSpace.get(space);\n\n\tlet coords = space.from(color);\n\tlet ret = {space, coords, alpha: color.alpha};\n\n\tif (inGamut) {\n\t\tret = toGamut(ret, inGamut === true ? undefined : inGamut);\n\t}\n\n\treturn ret;\n}\n\nto.returns = \"color\";\n", "import * as util from \"./util.js\";\nimport ColorSpace from \"./space.js\";\nimport defaults from \"./defaults.js\";\nimport getColor from \"./getColor.js\";\nimport checkInGamut from \"./inGamut.js\";\nimport toGamut from \"./toGamut.js\";\nimport clone from \"./clone.js\";\n\n/**\n * Generic toString() method, outputs a color(spaceId ...coords) function, a functional syntax, or custom formats defined by the color space\n * @param {Object} options\n * @param {number} options.precision - Significant digits\n * @param {boolean} options.inGamut - Adjust coordinates to fit in gamut first? [default: false]\n */\nexport default function serialize (color, {\n\tprecision = defaults.precision,\n\tformat = \"default\",\n\tinGamut = true,\n\t...customOptions\n} = {}) {\n\tlet ret;\n\n\tcolor = getColor(color);\n\n\tlet formatId = format;\n\tformat = color.space.getFormat(format)\n\t       ?? color.space.getFormat(\"default\")\n\t       ?? ColorSpace.DEFAULT_FORMAT;\n\n\t// The assignment to coords and inGamut needs to stay in the order they are now\n\t// The order of the assignment was changed as a workaround for a bug in Next.js\n\t// See this issue for details: https://github.com/color-js/color.js/issues/260\n\n\tlet coords = color.coords.slice(); // clone so we can manipulate it\n\n\tinGamut ||= format.toGamut;\n\n\tif (inGamut && !checkInGamut(color)) {\n\t\t// FIXME what happens if the color contains NaNs?\n\t\tcoords = toGamut(clone(color), inGamut === true ? undefined : inGamut).coords;\n\t}\n\n\tif (format.type === \"custom\") {\n\t\tcustomOptions.precision = precision;\n\n\t\tif (format.serialize) {\n\t\t\tret = format.serialize(coords, color.alpha, customOptions);\n\t\t}\n\t\telse {\n\t\t\tthrow new TypeError(`format ${formatId} can only be used to parse colors, not for serialization`);\n\t\t}\n\t}\n\telse {\n\t\t// Functional syntax\n\t\tlet name = format.name || \"color\";\n\n\t\tif (format.serializeCoords) {\n\t\t\tcoords = format.serializeCoords(coords, precision);\n\t\t}\n\t\telse {\n\t\t\tif (precision !== null) {\n\t\t\t\tcoords = coords.map(c => {\n\t\t\t\t\treturn util.serializeNumber(c, {precision});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tlet args = [...coords];\n\n\t\tif (name === \"color\") {\n\t\t\t// If output is a color() function, add colorspace id as first argument\n\t\t\tlet cssId = format.id || format.ids?.[0] || color.space.id;\n\t\t\targs.unshift(cssId);\n\t\t}\n\n\t\tlet alpha = color.alpha;\n\t\tif (precision !== null) {\n\t\t\talpha = util.serializeNumber(alpha, {precision});\n\t\t}\n\n\t\tlet strAlpha = color.alpha >= 1 || format.noAlpha ? \"\" : `${format.commas ? \",\" : \" /\"} ${alpha}`;\n\t\tret = `${name}(${args.join(format.commas ? \", \" : \" \")}${strAlpha})`;\n\t}\n\n\treturn ret;\n}\n", "import RGBColorSpace from \"../rgbspace.js\";\n\n// This is the linear-light version of sRGB\n// as used for example in SVG filters\n// or in Canvas\n\n// This matrix was calculated directly from the RGB and white chromaticities\n// when rounded to 8 decimal places, it agrees completely with the official matrix\n// see https://github.com/w3c/csswg-drafts/issues/5922\nconst toXYZ_M = [\n\t[ 0.41239079926595934, 0.357584339383878,   0.1804807884018343  ],\n\t[ 0.21263900587151027, 0.715168678767756,   0.07219231536073371 ],\n\t[ 0.01933081871559182, 0.11919477979462598, 0.9505321522496607  ],\n];\n\n// This matrix is the inverse of the above;\n// again it agrees with the official definition when rounded to 8 decimal places\nexport const fromXYZ_M = [\n\t[  3.2409699419045226,  -1.537383177570094,   -0.4986107602930034  ],\n\t[ -0.9692436362808796,   1.8759675015077202,   0.04155505740717559 ],\n\t[  0.05563007969699366, -0.20397695888897652,  1.0569715142428786  ],\n];\n\nexport default new RGBColorSpace({\n\tid: \"srgb-linear\",\n\tname: \"Linear sRGB\",\n\twhite: \"D65\",\n\ttoXYZ_M,\n\tfromXYZ_M,\n});\n", "/* List of CSS color keywords\n * Note that this does not include currentColor, transparent,\n * or system colors\n */\n\n// To produce: Visit https://www.w3.org/TR/css-color-4/#named-colors\n// and run in the console:\n// copy($$(\"tr\", $(\".named-color-table tbody\")).map(tr => `\"${tr.cells[2].textContent.trim()}\": [${tr.cells[4].textContent.trim().split(/\\s+/).map(c => c === \"0\"? \"0\" : c === \"255\"? \"1\" : c + \" / 255\").join(\", \")}]`).join(\",\\n\"))\nexport default {\n\t\"aliceblue\": [240 / 255, 248 / 255, 1],\n\t\"antiquewhite\": [250 / 255, 235 / 255, 215 / 255],\n\t\"aqua\": [0, 1, 1],\n\t\"aquamarine\": [127 / 255, 1, 212 / 255],\n\t\"azure\": [240 / 255, 1, 1],\n\t\"beige\": [245 / 255, 245 / 255, 220 / 255],\n\t\"bisque\": [1, 228 / 255, 196 / 255],\n\t\"black\": [0, 0, 0],\n\t\"blanchedalmond\": [1, 235 / 255, 205 / 255],\n\t\"blue\": [0, 0, 1],\n\t\"blueviolet\": [138 / 255, 43 / 255, 226 / 255],\n\t\"brown\": [165 / 255, 42 / 255, 42 / 255],\n\t\"burlywood\": [222 / 255, 184 / 255, 135 / 255],\n\t\"cadetblue\": [95 / 255, 158 / 255, 160 / 255],\n\t\"chartreuse\": [127 / 255, 1, 0],\n\t\"chocolate\": [210 / 255, 105 / 255, 30 / 255],\n\t\"coral\": [1, 127 / 255, 80 / 255],\n\t\"cornflowerblue\": [100 / 255, 149 / 255, 237 / 255],\n\t\"cornsilk\": [1, 248 / 255, 220 / 255],\n\t\"crimson\": [220 / 255, 20 / 255, 60 / 255],\n\t\"cyan\": [0, 1, 1],\n\t\"darkblue\": [0, 0, 139 / 255],\n\t\"darkcyan\": [0, 139 / 255, 139 / 255],\n\t\"darkgoldenrod\": [184 / 255, 134 / 255, 11 / 255],\n\t\"darkgray\": [169 / 255, 169 / 255, 169 / 255],\n\t\"darkgreen\": [0, 100 / 255, 0],\n\t\"darkgrey\": [169 / 255, 169 / 255, 169 / 255],\n\t\"darkkhaki\": [189 / 255, 183 / 255, 107 / 255],\n\t\"darkmagenta\": [139 / 255, 0, 139 / 255],\n\t\"darkolivegreen\": [85 / 255, 107 / 255, 47 / 255],\n\t\"darkorange\": [1, 140 / 255, 0],\n\t\"darkorchid\": [153 / 255, 50 / 255, 204 / 255],\n\t\"darkred\": [139 / 255, 0, 0],\n\t\"darksalmon\": [233 / 255, 150 / 255, 122 / 255],\n\t\"darkseagreen\": [143 / 255, 188 / 255, 143 / 255],\n\t\"darkslateblue\": [72 / 255, 61 / 255, 139 / 255],\n\t\"darkslategray\": [47 / 255, 79 / 255, 79 / 255],\n\t\"darkslategrey\": [47 / 255, 79 / 255, 79 / 255],\n\t\"darkturquoise\": [0, 206 / 255, 209 / 255],\n\t\"darkviolet\": [148 / 255, 0, 211 / 255],\n\t\"deeppink\": [1, 20 / 255, 147 / 255],\n\t\"deepskyblue\": [0, 191 / 255, 1],\n\t\"dimgray\": [105 / 255, 105 / 255, 105 / 255],\n\t\"dimgrey\": [105 / 255, 105 / 255, 105 / 255],\n\t\"dodgerblue\": [30 / 255, 144 / 255, 1],\n\t\"firebrick\": [178 / 255, 34 / 255, 34 / 255],\n\t\"floralwhite\": [1, 250 / 255, 240 / 255],\n\t\"forestgreen\": [34 / 255, 139 / 255, 34 / 255],\n\t\"fuchsia\": [1, 0, 1],\n\t\"gainsboro\": [220 / 255, 220 / 255, 220 / 255],\n\t\"ghostwhite\": [248 / 255, 248 / 255, 1],\n\t\"gold\": [1, 215 / 255, 0],\n\t\"goldenrod\": [218 / 255, 165 / 255, 32 / 255],\n\t\"gray\": [128 / 255, 128 / 255, 128 / 255],\n\t\"green\": [0, 128 / 255, 0],\n\t\"greenyellow\": [173 / 255, 1, 47 / 255],\n\t\"grey\": [128 / 255, 128 / 255, 128 / 255],\n\t\"honeydew\": [240 / 255, 1, 240 / 255],\n\t\"hotpink\": [1, 105 / 255, 180 / 255],\n\t\"indianred\": [205 / 255, 92 / 255, 92 / 255],\n\t\"indigo\": [75 / 255, 0, 130 / 255],\n\t\"ivory\": [1, 1, 240 / 255],\n\t\"khaki\": [240 / 255, 230 / 255, 140 / 255],\n\t\"lavender\": [230 / 255, 230 / 255, 250 / 255],\n\t\"lavenderblush\": [1, 240 / 255, 245 / 255],\n\t\"lawngreen\": [124 / 255, 252 / 255, 0],\n\t\"lemonchiffon\": [1, 250 / 255, 205 / 255],\n\t\"lightblue\": [173 / 255, 216 / 255, 230 / 255],\n\t\"lightcoral\": [240 / 255, 128 / 255, 128 / 255],\n\t\"lightcyan\": [224 / 255, 1, 1],\n\t\"lightgoldenrodyellow\": [250 / 255, 250 / 255, 210 / 255],\n\t\"lightgray\": [211 / 255, 211 / 255, 211 / 255],\n\t\"lightgreen\": [144 / 255, 238 / 255, 144 / 255],\n\t\"lightgrey\": [211 / 255, 211 / 255, 211 / 255],\n\t\"lightpink\": [1, 182 / 255, 193 / 255],\n\t\"lightsalmon\": [1, 160 / 255, 122 / 255],\n\t\"lightseagreen\": [32 / 255, 178 / 255, 170 / 255],\n\t\"lightskyblue\": [135 / 255, 206 / 255, 250 / 255],\n\t\"lightslategray\": [119 / 255, 136 / 255, 153 / 255],\n\t\"lightslategrey\": [119 / 255, 136 / 255, 153 / 255],\n\t\"lightsteelblue\": [176 / 255, 196 / 255, 222 / 255],\n\t\"lightyellow\": [1, 1, 224 / 255],\n\t\"lime\": [0, 1, 0],\n\t\"limegreen\": [50 / 255, 205 / 255, 50 / 255],\n\t\"linen\": [250 / 255, 240 / 255, 230 / 255],\n\t\"magenta\": [1, 0, 1],\n\t\"maroon\": [128 / 255, 0, 0],\n\t\"mediumaquamarine\": [102 / 255, 205 / 255, 170 / 255],\n\t\"mediumblue\": [0, 0, 205 / 255],\n\t\"mediumorchid\": [186 / 255, 85 / 255, 211 / 255],\n\t\"mediumpurple\": [147 / 255, 112 / 255, 219 / 255],\n\t\"mediumseagreen\": [60 / 255, 179 / 255, 113 / 255],\n\t\"mediumslateblue\": [123 / 255, 104 / 255, 238 / 255],\n\t\"mediumspringgreen\": [0, 250 / 255, 154 / 255],\n\t\"mediumturquoise\": [72 / 255, 209 / 255, 204 / 255],\n\t\"mediumvioletred\": [199 / 255, 21 / 255, 133 / 255],\n\t\"midnightblue\": [25 / 255, 25 / 255, 112 / 255],\n\t\"mintcream\": [245 / 255, 1, 250 / 255],\n\t\"mistyrose\": [1, 228 / 255, 225 / 255],\n\t\"moccasin\": [1, 228 / 255, 181 / 255],\n\t\"navajowhite\": [1, 222 / 255, 173 / 255],\n\t\"navy\": [0, 0, 128 / 255],\n\t\"oldlace\": [253 / 255, 245 / 255, 230 / 255],\n\t\"olive\": [128 / 255, 128 / 255, 0],\n\t\"olivedrab\": [107 / 255, 142 / 255, 35 / 255],\n\t\"orange\": [1, 165 / 255, 0],\n\t\"orangered\": [1, 69 / 255, 0],\n\t\"orchid\": [218 / 255, 112 / 255, 214 / 255],\n\t\"palegoldenrod\": [238 / 255, 232 / 255, 170 / 255],\n\t\"palegreen\": [152 / 255, 251 / 255, 152 / 255],\n\t\"paleturquoise\": [175 / 255, 238 / 255, 238 / 255],\n\t\"palevioletred\": [219 / 255, 112 / 255, 147 / 255],\n\t\"papayawhip\": [1, 239 / 255, 213 / 255],\n\t\"peachpuff\": [1, 218 / 255, 185 / 255],\n\t\"peru\": [205 / 255, 133 / 255, 63 / 255],\n\t\"pink\": [1, 192 / 255, 203 / 255],\n\t\"plum\": [221 / 255, 160 / 255, 221 / 255],\n\t\"powderblue\": [176 / 255, 224 / 255, 230 / 255],\n\t\"purple\": [128 / 255, 0, 128 / 255],\n\t\"rebeccapurple\": [102 / 255, 51 / 255, 153 / 255],\n\t\"red\": [1, 0, 0],\n\t\"rosybrown\": [188 / 255, 143 / 255, 143 / 255],\n\t\"royalblue\": [65 / 255, 105 / 255, 225 / 255],\n\t\"saddlebrown\": [139 / 255, 69 / 255, 19 / 255],\n\t\"salmon\": [250 / 255, 128 / 255, 114 / 255],\n\t\"sandybrown\": [244 / 255, 164 / 255, 96 / 255],\n\t\"seagreen\": [46 / 255, 139 / 255, 87 / 255],\n\t\"seashell\": [1, 245 / 255, 238 / 255],\n\t\"sienna\": [160 / 255, 82 / 255, 45 / 255],\n\t\"silver\": [192 / 255, 192 / 255, 192 / 255],\n\t\"skyblue\": [135 / 255, 206 / 255, 235 / 255],\n\t\"slateblue\": [106 / 255, 90 / 255, 205 / 255],\n\t\"slategray\": [112 / 255, 128 / 255, 144 / 255],\n\t\"slategrey\": [112 / 255, 128 / 255, 144 / 255],\n\t\"snow\": [1, 250 / 255, 250 / 255],\n\t\"springgreen\": [0, 1, 127 / 255],\n\t\"steelblue\": [70 / 255, 130 / 255, 180 / 255],\n\t\"tan\": [210 / 255, 180 / 255, 140 / 255],\n\t\"teal\": [0, 128 / 255, 128 / 255],\n\t\"thistle\": [216 / 255, 191 / 255, 216 / 255],\n\t\"tomato\": [1, 99 / 255, 71 / 255],\n\t\"turquoise\": [64 / 255, 224 / 255, 208 / 255],\n\t\"violet\": [238 / 255, 130 / 255, 238 / 255],\n\t\"wheat\": [245 / 255, 222 / 255, 179 / 255],\n\t\"white\": [1, 1, 1],\n\t\"whitesmoke\": [245 / 255, 245 / 255, 245 / 255],\n\t\"yellow\": [1, 1, 0],\n\t\"yellowgreen\": [154 / 255, 205 / 255, 50 / 255],\n};\n", "import RGBColorSpace from \"../rgbspace.js\";\nimport sRGBLinear from \"./srgb-linear.js\";\nimport KEYWORDS from \"../keywords.js\";\n\nlet coordGrammar = Array(3).fill(\"<percentage> | <number>[0, 255]\");\nlet coordGrammarNumber = Array(3).fill(\"<number>[0, 255]\");\n\nexport default new RGBColorSpace({\n\tid: \"srgb\",\n\tname: \"sRGB\",\n\tbase: sRGBLinear,\n\tfromBase: rgb => {\n\t\t// convert an array of linear-light sRGB values in the range 0.0-1.0\n\t\t// to gamma corrected form\n\t\t// https://en.wikipedia.org/wiki/SRGB\n\t\treturn rgb.map(val => {\n\t\t\tlet sign = val < 0 ? -1 : 1;\n\t\t\tlet abs = val * sign;\n\n\t\t\tif (abs > 0.0031308) {\n\t\t\t\treturn sign * (1.055 * (abs ** (1 / 2.4)) - 0.055);\n\t\t\t}\n\n\t\t\treturn 12.92 * val;\n\t\t});\n\t},\n\ttoBase: rgb => {\n\t\t// convert an array of sRGB values in the range 0.0 - 1.0\n\t\t// to linear light (un-companded) form.\n\t\t// https://en.wikipedia.org/wiki/SRGB\n\t\treturn rgb.map(val => {\n\t\t\tlet sign = val < 0 ? -1 : 1;\n\t\t\tlet abs = val * sign;\n\n\t\t\tif (abs <= 0.04045) {\n\t\t\t\treturn val / 12.92;\n\t\t\t}\n\n\t\t\treturn sign * (((abs + 0.055) / 1.055) ** 2.4);\n\t\t});\n\t},\n\tformats: {\n\t\t\"rgb\": {\n\t\t\tcoords: coordGrammar,\n\t\t},\n\t\t\"rgb_number\": {\n\t\t\tname: \"rgb\",\n\t\t\tcommas: true,\n\t\t\tcoords: coordGrammarNumber,\n\t\t\tnoAlpha: true,\n\t\t},\n\t\t\"color\": { /* use defaults */ },\n\t\t\"rgba\": {\n\t\t\tcoords: coordGrammar,\n\t\t\tcommas: true,\n\t\t\tlastAlpha: true,\n\t\t},\n\t\t\"rgba_number\": {\n\t\t\tname: \"rgba\",\n\t\t\tcommas: true,\n\t\t\tcoords: coordGrammarNumber,\n\t\t},\n\t\t\"hex\": {\n\t\t\ttype: \"custom\",\n\t\t\ttoGamut: true,\n\t\t\ttest: str => /^#([a-f0-9]{3,4}){1,2}$/i.test(str),\n\t\t\tparse (str) {\n\t\t\t\tif (str.length <= 5) {\n\t\t\t\t\t// #rgb or #rgba, duplicate digits\n\t\t\t\t\tstr = str.replace(/[a-f0-9]/gi, \"$&$&\");\n\t\t\t\t}\n\n\t\t\t\tlet rgba = [];\n\t\t\t\tstr.replace(/[a-f0-9]{2}/gi, component => {\n\t\t\t\t\trgba.push(parseInt(component, 16) / 255);\n\t\t\t\t});\n\n\t\t\t\treturn {\n\t\t\t\t\tspaceId: \"srgb\",\n\t\t\t\t\tcoords: rgba.slice(0, 3),\n\t\t\t\t\talpha: rgba.slice(3)[0],\n\t\t\t\t};\n\t\t\t},\n\t\t\tserialize: (coords, alpha, {\n\t\t\t\tcollapse = true, // collapse to 3-4 digit hex when possible?\n\t\t\t} = {}) => {\n\t\t\t\tif (alpha < 1) {\n\t\t\t\t\tcoords.push(alpha);\n\t\t\t\t}\n\n\t\t\t\tcoords = coords.map(c => Math.round(c * 255));\n\n\t\t\t\tlet collapsible = collapse && coords.every(c => c % 17 === 0);\n\n\t\t\t\tlet hex = coords.map(c => {\n\t\t\t\t\tif (collapsible) {\n\t\t\t\t\t\treturn (c / 17).toString(16);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn c.toString(16).padStart(2, \"0\");\n\t\t\t\t}).join(\"\");\n\n\t\t\t\treturn \"#\" + hex;\n\t\t\t},\n\t\t},\n\t\t\"keyword\": {\n\t\t\ttype: \"custom\",\n\t\t\ttest: str => /^[a-z]+$/i.test(str),\n\t\t\tparse (str) {\n\t\t\t\tstr = str.toLowerCase();\n\t\t\t\tlet ret = {spaceId: \"srgb\", coords: null, alpha: 1};\n\n\t\t\t\tif (str === \"transparent\") {\n\t\t\t\t\tret.coords = KEYWORDS.black;\n\t\t\t\t\tret.alpha = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tret.coords = KEYWORDS[str];\n\t\t\t\t}\n\n\t\t\t\tif (ret.coords) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n});\n", "import ColorSpace from \"../space.js\";\nimport sRGB from \"./srgb.js\";\n\nexport default new ColorSpace({\n\tid: \"hsl\",\n\tname: \"HSL\",\n\tcoords: {\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t\ts: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Saturation\",\n\t\t},\n\t\tl: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t},\n\n\tbase: sRGB,\n\n\t// Adapted from https://drafts.csswg.org/css-color-4/better-rgbToHsl.js\n\tfromBase: rgb => {\n\t\tlet max = Math.max(...rgb);\n\t\tlet min = Math.min(...rgb);\n\t\tlet [r, g, b] = rgb;\n\t\tlet [h, s, l] = [NaN, 0, (min + max) / 2];\n\t\tlet d = max - min;\n\n\t\tif (d !== 0) {\n\t\t\ts = (l === 0 || l === 1) ? 0 : (max - l) / Math.min(l, 1 - l);\n\n\t\t\tswitch (max) {\n\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t\t\t\tcase g: h = (b - r) / d + 2; break;\n\t\t\t\tcase b: h = (r - g) / d + 4;\n\t\t\t}\n\n\t\t\th = h * 60;\n\t\t}\n\n\t\t// Very out of gamut colors can produce negative saturation\n\t\t// If so, just rotate the hue by 180 and use a positive saturation\n\t\t// see https://github.com/w3c/csswg-drafts/issues/9222\n\t\tif (s < 0) {\n\t\t\th += 180;\n\t\t\ts = Math.abs(s);\n\t\t}\n\n\t\tif (h >= 360) {\n\t\t\th -= 360;\n\t\t}\n\n\t\treturn [h, s * 100, l * 100];\n\t},\n\n\t// Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative\n\ttoBase: hsl => {\n\t\tlet [h, s, l] = hsl;\n\t\th = h % 360;\n\n\t\tif (h < 0) {\n\t\t\th += 360;\n\t\t}\n\n\t\ts /= 100;\n\t\tl /= 100;\n\n\t\tfunction f (n) {\n\t\t\tlet k = (n + h / 30) % 12;\n\t\t\tlet a = s * Math.min(l, 1 - l);\n\t\t\treturn l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));\n\t\t}\n\n\t\treturn [f(0), f(8), f(4)];\n\t},\n\n\tformats: {\n\t\t\"hsl\": {\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage>\", \"<percentage>\"],\n\t\t},\n\t\t\"hsla\": {\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage>\", \"<percentage>\"],\n\t\t\tcommas: true,\n\t\t\tlastAlpha: true,\n\t\t},\n\t},\n});\n", "import ColorSpace from \"../space.js\";\nimport OKLab from \"./oklab.js\";\nimport {constrain as constrainAngle} from \"../angles.js\";\n\nexport default new ColorSpace({\n\tid: \"oklch\",\n\tname: \"Oklch\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\tc: {\n\t\t\trefRange: [0, 0.4],\n\t\t\tname: \"Chroma\",\n\t\t},\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\twhite: \"D65\",\n\n\tbase: OKLab,\n\tfromBase (oklab) {\n\t\t// Convert to polar form\n\t\tlet [L, a, b] = oklab;\n\t\tlet h;\n\t\tconst \u03B5 = 0.0002; // chromatic components much smaller than a,b\n\n\t\tif (Math.abs(a) < \u03B5 && Math.abs(b) < \u03B5) {\n\t\t\th = NaN;\n\t\t}\n\t\telse {\n\t\t\th = Math.atan2(b, a) * 180 / Math.PI;\n\t\t}\n\n\t\treturn [\n\t\t\tL, // OKLab L is still L\n\t\t\tMath.sqrt(a ** 2 + b ** 2), // Chroma\n\t\t\tconstrainAngle(h), // Hue, in degrees [0 to 360)\n\t\t];\n\t},\n\t// Convert from polar form\n\ttoBase (oklch) {\n\t\tlet [L, C, h] = oklch;\n\t\tlet a, b;\n\n\t\t// check for NaN hue\n\t\tif (isNaN(h)) {\n\t\t\ta = 0;\n\t\t\tb = 0;\n\t\t}\n\t\telse {\n\t\t\ta = C * Math.cos(h * Math.PI / 180);\n\t\t\tb = C * Math.sin(h * Math.PI / 180);\n\t\t}\n\n\t\treturn [ L, a, b ];\n\t},\n\n\tformats: {\n\t\t\"oklch\": {\n\t\t\tcoords: [\"<percentage> | <number>\", \"<number> | <percentage>[0,1]\", \"<number> | <angle>\"],\n\t\t},\n\t},\n});\n", "import {\n    to as convert,\n    parse as parseColor,\n    ColorSpace,\n    serialize,\n    sRGB,\n    OKLCH,\n    HSL,\n    ColorConstructor,\n    PlainColorObject,\n} from \"colorjs.io/fn\";\n\nColorSpace.register(sRGB);\nColorSpace.register(OKLCH);\nColorSpace.register(HSL);\n\ntype CoordsValueType = {\n    l: number;\n    c: number;\n    h: number;\n};\n\ntype ColorValueType = {\n    hex: string;\n    oklch: string;\n    coords: CoordsValueType;\n    lightness: number;\n};\n\nexport function setStateFromValue(\n    value: null | undefined | string | ColorValueType | CoordsValueType,\n    mode: \"all\" | \"hex\" | \"oklch\" | \"coords\",\n    precision: number,\n) {\n    if (\n        !value ||\n        (Array.isArray(value) && value.length === 0) ||\n        (typeof value === \"object\" && Object.keys(value).length === 0)\n    ) {\n        return {};\n    }\n\n    if (mode === \"all\") {\n        // @ts-ignore\n        return value?.hex ? value : {};\n    }\n\n    if (mode === \"coords\") {\n        // @ts-ignore\n        if (value?.l === undefined || value?.c === undefined || value?.h === undefined) {\n            return {};\n        }\n        // @ts-ignore\n        return convertOKLCHFromValue(`oklch(${value.l} ${value.c} ${value.h})`, precision);\n    }\n\n    if (mode === \"hex\") {\n        return onHexChange(value as string, precision);\n    }\n\n    if (mode === \"oklch\") {\n        return convertOKLCHFromValue(value as string, precision);\n    }\n\n    return {};\n}\n\nfunction convertOKLCHFromValue(value: string, precision: number) {\n    const color = parseColor(value);\n    const lightness = getLightness(color);\n    const rgb = convert(color, sRGB);\n    return {\n        hex: serialize(rgb, { format: \"hex\" }),\n        oklch: serialize(color, { precision }),\n        coords: convertToOkLchCoords(color, precision),\n        lightness,\n    };\n}\n\nexport function setLightness(hex: string, lightness: number) {\n    const color = parseColor(hex);\n    const hsl = convert(color, HSL);\n    hsl.coords[2] = lightness;\n    return serialize(convert(hsl, sRGB), { format: \"hex\" });\n}\n\nexport function setLuminance(oklch: string, luminance: number) {\n    const color = parseColor(oklch);\n    color.coords[0] = luminance / 100;\n    const rgb = convert(color, sRGB);\n    return serialize(rgb, { format: \"hex\" });\n}\n\nexport function onHexChange(hex: string, precision: number): ColorValueType {\n    const color = parseColor(hex);\n    const lightness = getLightness(color);\n    const oklch = convert(color, OKLCH);\n\n    return {\n        hex,\n        oklch: serialize(oklch, { precision }),\n        coords: convertToOkLchCoords(oklch, precision),\n        lightness,\n    };\n}\n\nfunction getLightness(color: ColorConstructor) {\n    const { coords } = convert(color, HSL);\n    return Math.round(coords[2]);\n}\n\nfunction convertToOkLchCoords(oklch: PlainColorObject | ColorConstructor, precision = 5) {\n    const { coords } = oklch;\n    return {\n        l: round(coords[0], precision),\n        c: round(coords[1], precision),\n        h: round(coords[2], precision),\n    };\n}\n\nfunction round(value: number, precision: number | undefined = undefined) {\n    value = value || 0;\n    if (!precision) {\n        return value;\n    }\n    const factor = Math.pow(10, precision);\n    return Math.round(value * factor) / factor;\n}\n", "// @ts-ignore\nimport React from \"react\";\nimport * as stylex from \"@stylexjs/stylex\";\nimport \"../Tokens.stylex\";\nimport { colors, sizes, fonts } from \"../Tokens.stylex\";\nconst styles = {\n  button: {\n    cursor: \"x1ypdohk\",\n    textOverflow: \"xlyipyv\",\n    whiteSpace: \"xuxw1ft\",\n    fontSize: \"xiq9r4\",\n    lineHeight: \"x1bexyg0\",\n    padding: \"x1dskcqz\",\n    overflow: \"xb3r6kr\",\n    display: \"x78zum5\",\n    gap: \"x188dswm\",\n    alignItems: \"x6s0dn4\",\n    border: \"x1wty727\",\n    background: \"x11g6tue\",\n    borderRadius: \"x2u8bby\",\n    color: \"x1awj2ng\",\n    width: \"xh8yej3\",\n    $$css: true\n  },\n  buttonHighlighted: {\n    backgroundColor: \"x18z1ewl\",\n    $$css: true\n  }\n};\nexport default function OptionPreview({\n  option,\n  onClick,\n  isHighlighted,\n  onMouseEnter\n}: {\n  option: {\n    label: string;\n    value: string;\n  };\n  onClick: () => void;\n  isHighlighted: boolean;\n  onMouseEnter: () => void;\n}) {\n  const label = capitalizeFirstLetter(option.label);\n  return <button {...stylex.props(styles.button, isHighlighted && styles.buttonHighlighted)} onClick={onClick} onMouseEnter={onMouseEnter} type=\"button\">\n            <span {...{\n      className: \"x1lliihq xwqb0wv x1wyezfn xorixrz xyqm4zk x6ka6pt\"\n    }} style={{\n      backgroundColor: option.value\n    }}></span>\n            <span title={label}>{label}</span>\n        </button>;\n}\nfunction capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}", "var styleq$1 = {};\n\n/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nObject.defineProperty(styleq$1, \"__esModule\", {\n  value: true\n});\nvar styleq_2 = styleq$1.styleq = void 0;\nvar cache = new WeakMap();\nvar compiledKey = '$$css';\n\nfunction createStyleq(options) {\n  var disableCache;\n  var disableMix;\n  var transform;\n\n  if (options != null) {\n    disableCache = options.disableCache === true;\n    disableMix = options.disableMix === true;\n    transform = options.transform;\n  }\n\n  return function styleq() {\n    // Keep track of property commits to the className\n    var definedProperties = []; // The className and inline style to build up\n\n    var className = '';\n    var inlineStyle = null; // The current position in the cache graph\n\n    var nextCache = disableCache ? null : cache; // This way of creating an array from arguments is fastest\n\n    var styles = new Array(arguments.length);\n\n    for (var i = 0; i < arguments.length; i++) {\n      styles[i] = arguments[i];\n    } // Iterate over styles from last to first\n\n\n    while (styles.length > 0) {\n      var possibleStyle = styles.pop(); // Skip empty items\n\n      if (possibleStyle == null || possibleStyle === false) {\n        continue;\n      } // Push nested styles back onto the stack to be processed\n\n\n      if (Array.isArray(possibleStyle)) {\n        for (var _i = 0; _i < possibleStyle.length; _i++) {\n          styles.push(possibleStyle[_i]);\n        }\n\n        continue;\n      } // Process an individual style object\n\n\n      var style = transform != null ? transform(possibleStyle) : possibleStyle;\n\n      if (style.$$css) {\n        // Build up the class names defined by this object\n        var classNameChunk = ''; // Check the cache to see if we've already done this work\n\n        if (nextCache != null && nextCache.has(style)) {\n          // Cache: read\n          var cacheEntry = nextCache.get(style);\n\n          if (cacheEntry != null) {\n            classNameChunk = cacheEntry[0]; // $FlowIgnore\n\n            definedProperties.push.apply(definedProperties, cacheEntry[1]);\n            nextCache = cacheEntry[2];\n          }\n        } // Update the chunks with data from this object\n        else {\n          // The properties defined by this object\n          var definedPropertiesChunk = [];\n\n          for (var prop in style) {\n            var value = style[prop];\n            if (prop === compiledKey) continue; // Each property value is used as an HTML class name\n            // { 'debug.string': 'debug.string', opacity: 's-jskmnoqp' }\n\n            if (typeof value === 'string' || value === null) {\n              // Only add to chunks if this property hasn't already been seen\n              if (!definedProperties.includes(prop)) {\n                definedProperties.push(prop);\n\n                if (nextCache != null) {\n                  definedPropertiesChunk.push(prop);\n                }\n\n                if (typeof value === 'string') {\n                  classNameChunk += classNameChunk ? ' ' + value : value;\n                }\n              }\n            } // If we encounter a value that isn't a string or `null`\n            else {\n              console.error(\"styleq: \".concat(prop, \" typeof \").concat(String(value), \" is not \\\"string\\\" or \\\"null\\\".\"));\n            }\n          } // Cache: write\n\n\n          if (nextCache != null) {\n            // Create the next WeakMap for this sequence of styles\n            var weakMap = new WeakMap();\n            nextCache.set(style, [classNameChunk, definedPropertiesChunk, weakMap]);\n            nextCache = weakMap;\n          }\n        } // Order of classes in chunks matches property-iteration order of style\n        // object. Order of chunks matches passed order of styles from first to\n        // last (which we iterate over in reverse).\n\n\n        if (classNameChunk) {\n          className = className ? classNameChunk + ' ' + className : classNameChunk;\n        }\n      } // ----- DYNAMIC: Process inline style object -----\n      else {\n        if (disableMix) {\n          if (inlineStyle == null) {\n            inlineStyle = {};\n          }\n\n          inlineStyle = Object.assign({}, style, inlineStyle);\n        } else {\n          var subStyle = null;\n\n          for (var _prop in style) {\n            var _value = style[_prop];\n\n            if (_value !== undefined) {\n              if (!definedProperties.includes(_prop)) {\n                if (_value != null) {\n                  if (inlineStyle == null) {\n                    inlineStyle = {};\n                  }\n\n                  if (subStyle == null) {\n                    subStyle = {};\n                  }\n\n                  subStyle[_prop] = _value;\n                }\n\n                definedProperties.push(_prop); // Cache is unnecessary overhead if results can't be reused.\n\n                nextCache = null;\n              }\n            }\n          }\n\n          if (subStyle != null) {\n            inlineStyle = Object.assign(subStyle, inlineStyle);\n          }\n        }\n      }\n    }\n\n    var styleProps = [className, inlineStyle];\n    return styleProps;\n  };\n}\n\nvar styleq = createStyleq();\nstyleq_2 = styleq$1.styleq = styleq;\nstyleq.factory = createStyleq;\n\nconst errorForFn = name => new Error(`'stylex.${name}' should never be called at runtime. It should be compiled away by '@stylexjs/babel-plugin'`);\nconst errorForType = key => errorForFn(`types.${key}`);\nfunction props() {\n  const options = this;\n  for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n    styles[_key] = arguments[_key];\n  }\n  if (__implementations.props) {\n    return __implementations.props.call(options, styles);\n  }\n  const [className, style] = styleq_2(styles);\n  const result = {};\n  if (className != null && className !== '') {\n    result.className = className;\n  }\n  if (style != null && Object.keys(style).length > 0) {\n    result.style = style;\n  }\n  return result;\n}\nfunction attrs() {\n  const {\n    className,\n    style\n  } = props(...arguments);\n  const result = {};\n  if (className != null && className !== '') {\n    result.class = className;\n  }\n  if (style != null && Object.keys(style).length > 0) {\n    result.style = Object.keys(style).map(key => `${key}:${style[key]};`).join('');\n  }\n  return result;\n}\nfunction stylexCreate(styles) {\n  if (__implementations.create != null) {\n    const create = __implementations.create;\n    return create(styles);\n  }\n  throw errorForFn('create');\n}\nfunction stylexDefineVars(styles) {\n  if (__implementations.defineVars) {\n    return __implementations.defineVars(styles);\n  }\n  throw errorForFn('defineVars');\n}\nconst stylexCreateTheme = (baseTokens, overrides) => {\n  if (__implementations.createTheme) {\n    return __implementations.createTheme(baseTokens, overrides);\n  }\n  throw errorForFn('createTheme');\n};\nconst stylexInclude = styles => {\n  if (__implementations.include) {\n    return __implementations.include(styles);\n  }\n  throw errorForFn('include');\n};\nconst create = stylexCreate;\nconst defineVars = stylexDefineVars;\nconst createTheme = stylexCreateTheme;\nconst include = stylexInclude;\nconst types = {\n  angle: _v => {\n    throw errorForType('angle');\n  },\n  color: _v => {\n    throw errorForType('color');\n  },\n  url: _v => {\n    throw errorForType('url');\n  },\n  image: _v => {\n    throw errorForType('image');\n  },\n  integer: _v => {\n    throw errorForType('integer');\n  },\n  lengthPercentage: _v => {\n    throw errorForType('lengthPercentage');\n  },\n  length: _v => {\n    throw errorForType('length');\n  },\n  percentage: _v => {\n    throw errorForType('percentage');\n  },\n  number: _v => {\n    throw errorForType('number');\n  },\n  resolution: _v => {\n    throw errorForType('resolution');\n  },\n  time: _v => {\n    throw errorForType('time');\n  },\n  transformFunction: _v => {\n    throw errorForType('transformFunction');\n  },\n  transformList: _v => {\n    throw errorForType('transformList');\n  }\n};\nconst keyframes = keyframes => {\n  if (__implementations.keyframes) {\n    return __implementations.keyframes(keyframes);\n  }\n  throw errorForFn('keyframes');\n};\nconst firstThatWorks = function () {\n  if (__implementations.firstThatWorks) {\n    return __implementations.firstThatWorks(...arguments);\n  }\n  throw errorForFn('firstThatWorks');\n};\nfunction _stylex() {\n  for (var _len2 = arguments.length, styles = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    styles[_key2] = arguments[_key2];\n  }\n  const [className] = styleq_2(styles);\n  return className;\n}\n_stylex.props = props;\n_stylex.attrs = attrs;\n_stylex.create = create;\n_stylex.defineVars = defineVars;\n_stylex.createTheme = createTheme;\n_stylex.include = include;\n_stylex.keyframes = keyframes;\n_stylex.firstThatWorks = firstThatWorks;\n_stylex.types = types;\nconst __implementations = {};\nfunction __monkey_patch__(key, implementation) {\n  if (key === 'types') {\n    Object.assign(types, implementation);\n  } else {\n    __implementations[key] = implementation;\n  }\n}\nconst legacyMerge = _stylex;\n\nexport { __monkey_patch__, attrs, create, createTheme, _stylex as default, defineVars, firstThatWorks, include, keyframes, legacyMerge, props, types };\n", "// @ts-ignore\nimport React, { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport * as stylex from \"@stylexjs/stylex\";\nimport \"../Tokens.stylex\";\nimport { colors, sizes, fonts, transitions } from \"../Tokens.stylex\";\nconst styles = {\n  wrapper: {\n    display: \"x78zum5\",\n    flexDirection: \"xdt5ytf\",\n    maxWidth: \"x193iq5w\",\n    gap: \"x188dswm\",\n    $$css: true\n  },\n  disabled: {\n    cursor: \"x1h6gzvc\",\n    opacity: \"x190dgpg\",\n    \":where(*) *_pointerEvents\": \"x8ie97q\",\n    $$css: true\n  }\n};\nexport default function RangeSlider({\n  value,\n  onChange,\n  label,\n  disabled\n}: {\n  value: number;\n  onChange: Function;\n  label: string;\n  input?: Boolean;\n  disabled?: Boolean;\n}) {\n  const [number, setNumber] = useState(value || 0);\n  const id = \"range-\" + nanoid();\n  const min = 0;\n  const max = 100;\n  useEffect(() => {\n    setNumber(value);\n  }, [value]);\n  function handleChange(event: React.FormEvent<HTMLInputElement>) {\n    onChange(event?.currentTarget?.valueAsNumber);\n  }\n  const numLength = (value: number) => value.toString().length;\n  const minWidth = Math.max(numLength(min), numLength(max)) + \"ch\";\n  const minWidthInput = `calc(${minWidth} + 2rem)`; // 2rem for the input padding\n\n  return <div {...stylex.props(styles.wrapper, disabled && styles.disabled)}>\n            <div {...{\n      className: \"x78zum5 x1qughib x188dswm\"\n    }}>\n                <label htmlFor={id} {...{\n        className: \"x87ps6o x1ypdohk xiq9r4\"\n      }}>\n                    {label}\n                </label>\n                <input {...{\n        className: \"x1lo5vof xdneb0g xjohyra x1hr2gdg x1awj2ng x1sirlc8 x1wty727 x11g6tue x1a2a7pz x1i1gfen x9pjoqp xtilpmw x1yrzqix xo6swyp xpf6v1x x1agkqgv\"\n      }} style={{\n        minWidth: minWidthInput\n      }} min={min} max={max} type=\"number\" value={Math.round(number)} onChange={handleChange} id={id} inputMode=\"numeric\" />\n            </div>\n            <input {...{\n      className: \"xh8yej3 x1wyezfn xjyslct xjohyra x1wty727 x1a2a7pz x1qjns4s xibs45w x8cq3ga x1kthjsd xu2yhzc x1p6diu8 x1iqn34f xjpt6gn x1c6sthy x1butzbu x1tx7z28 xbepbgz xnwzpgn xd8b9pn x1tk0e90 x1xk2y70 x13fi9fm x4wtp0 x66xn83 x1w3w5 x1qquo6a xovb9ml xs99pfi x1l5f1bp x55q4sf x16hwx1y x3jfnhq xsahp4b x1272q6d xuyzg6f xoo02y2\"\n    }} type=\"range\" min={min} max={max} step=\"1\" value={Math.round(number)} onChange={handleChange} />\n        </div>;\n}", "export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n", "import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n", "import manifest from \"@neos-project/neos-ui-extensibility\";\n\nimport ColorPicker from \"./ColorPicker\";\n\nmanifest(\"Carbon.ColorPicker:OKLCH\", {}, (globalRegistry) => {\n    const editorsRegistry = globalRegistry.get(\"inspector\").get(\"editors\");\n\n    editorsRegistry.set(\"Carbon.ColorPicker/OKLCH\", {\n        component: ColorPicker,\n    });\n});\n"],
  "mappings": "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",
  "names": ["import_react", "useEventCallback", "handler", "callbackRef", "useRef", "fn", "value", "current", "clamp", "number", "min", "max", "isTouch", "event", "getParentWindow", "node", "ownerDocument", "defaultView", "self", "getRelativePosition", "touchId", "rect", "getBoundingClientRect", "pointer", "touches", "i", "length", "identifier", "left", "pageX", "pageXOffset", "width", "top", "pageY", "pageYOffset", "height", "preventDefaultMove", "preventDefault", "Interactive", "React", "memo", "o", "onMove", "onKey", "rest", "container", "onMoveCallback", "onKeyCallback", "hasTouch", "x", "useMemo", "handleMove", "buttons", "toggleDocumentEvents", "handleMoveEnd", "state", "touch", "parentWindow", "toggleEvent", "addEventListener", "removeEventListener", "e", "nativeEvent", "el", "changedTouches", "focus", "keyCode", "which", "handleMoveStart", "handleKeyDown", "useEffect", "onTouchStart", "onMouseDown", "className", "ref", "onKeyDown", "tabIndex", "role", "formatClassName", "names", "filter", "Boolean", "join", "Pointer", "r", "color", "nodeClassName", "style", "backgroundColor", "round", "digits", "base", "Math", "pow", "angleUnits", "grad", "turn", "rad", "PI", "hexToHsva", "hex", "rgbaToHsva", "hexToRgba", "substring", "parseInt", "g", "b", "a", "current", "hsvaToHex", "hsva", "rgbaToHex", "hsvaToRgba", "hsvaToHsla", "e", "s", "v", "a", "hh", "h", "round", "l", "hsvaToHslString", "r", "current", "hsvaToRgba", "e", "h", "s", "v", "a", "hh", "Math", "floor", "b", "c", "d", "module", "r", "round", "g", "current", "format", "number", "hex", "toString", "length", "rgbaToHex", "e", "r", "g", "b", "a", "alphaHex", "round", "rgbaToHsva", "max", "Math", "delta", "min", "hh", "h", "s", "v", "current", "Hue", "React", "memo", "r", "hue", "onChange", "nodeClassName", "formatClassName", "className", "Interactive", "onMove", "interaction", "h", "left", "onKey", "offset", "clamp", "aria-label", "aria-valuenow", "round", "aria-valuemax", "aria-valuemin", "Pointer", "color", "hsvaToHslString", "s", "v", "a", "Saturation", "hsva", "containerStyle", "backgroundColor", "style", "top", "aria-valuetext", "equalColorObjects", "first", "second", "prop", "current", "equalHex", "first", "second", "toLowerCase", "equalColorObjects", "hexToRgba", "useColorManipulation", "colorModel", "color", "onChange", "onChangeCallback", "useEventCallback", "useState", "toHsva", "hsva", "updateHsva", "cache", "useRef", "useEffect", "equal", "newHsva", "newColor", "fromHsva", "handleChange", "useCallback", "params", "Object", "assign", "nonce", "useIsomorphicLayoutEffect", "window", "useLayoutEffect", "getNonce", "__webpack_nonce__", "handleChange", "styleElementMap", "Map", "useStyleSheet", "nodeRef", "useIsomorphicLayoutEffect", "parentDocument", "current", "ownerDocument", "document", "has", "styleElement", "createElement", "innerHTML", "set", "nonce", "getNonce", "setAttribute", "head", "appendChild", "ColorPicker", "t", "className", "colorModel", "color", "defaultColor", "onChange", "rest", "useRef", "useColorManipulation", "hsva", "updateHsva", "nodeClassName", "formatClassName", "React", "ref", "Saturation", "Hue", "hue", "h", "toHsva", "hexToHsva", "fromHsva", "e", "hsvaToHex", "s", "v", "a", "equal", "equalHex", "HexColorPicker", "props", "handleChange", "matcher", "ColorInput", "props", "color", "t", "onChange", "onBlur", "escape", "validate", "format", "process", "rest", "useState", "value", "setValue", "onChangeCallback", "useEventCallback", "onBlurCallback", "useCallback", "e", "inputValue", "target", "handleBlur", "useEffect", "React", "spellCheck", "prefix", "HexColorInput", "prefixed", "alpha", "replace", "substring", "match", "exec", "length", "m", "x", "p", "_", "i", "c", "o", "n", "n", "p", "to", "coordGrammar", "type", "d", "name", "types", "i", "coordGrammar", "type", "c", "_", "white", "coords", "options", "c", "i", "s", "p", "\u03B5", "i", "f", "L", "a", "b", "\u03B5", "x", "x2", "b2", "T", "b2", "\u03B5", "c1", "i", "c2", "\u03C0", "d2r", "l", "c", "b2", "T", "F", "v", "b", "g", "n", "p", "d", "x", "\u03B5", "c1", "c2", "c3", "XYZtoLMS_M", "LMStoXYZ_M", "white", "m1", "adapt", "c", "x", "h", "i", "t", "f", "d", "p2", "r", "a", "b", "J", "Q", "C", "s", "white", "\u03B5", "\u03BA", "y", "h", "c", "t", "last", "viewingConditions", "rad2deg", "deg2rad", "viewingConditions", "a", "b", "b2", "m", "c", "i", "\u03B5", "clipped", "L", "white", "min", "max", "inGamut", "inGamut", "c", "c", "r", "g", "b", "h", "s", "l", "d", "f", "n", "a", "L", "a", "b", "h", "\u03B5", "C", "import_react", "styleq", "styles", "i", "create", "keyframes", "React", "import_react", "styles", "value", "React", "styles", "props", "React", "lightness", "luminance"]
}
